// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.0
// source: proto/bacotell_interaction.proto

package bacotellpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	InteractionProxy_Defer_FullMethodName       = "/bacotell.InteractionProxy/Defer"
	InteractionProxy_Respond_FullMethodName     = "/bacotell.InteractionProxy/Respond"
	InteractionProxy_Modal_FullMethodName       = "/bacotell.InteractionProxy/Modal"
	InteractionProxy_Followup_FullMethodName    = "/bacotell.InteractionProxy/Followup"
	InteractionProxy_Edit_FullMethodName        = "/bacotell.InteractionProxy/Edit"
	InteractionProxy_Delete_FullMethodName      = "/bacotell.InteractionProxy/Delete"
	InteractionProxy_GuildId_FullMethodName     = "/bacotell.InteractionProxy/GuildId"
	InteractionProxy_ChannelId_FullMethodName   = "/bacotell.InteractionProxy/ChannelId"
	InteractionProxy_UserLocale_FullMethodName  = "/bacotell.InteractionProxy/UserLocale"
	InteractionProxy_GuildLocale_FullMethodName = "/bacotell.InteractionProxy/GuildLocale"
	InteractionProxy_User_FullMethodName        = "/bacotell.InteractionProxy/User"
	InteractionProxy_Member_FullMethodName      = "/bacotell.InteractionProxy/Member"
	InteractionProxy_Message_FullMethodName     = "/bacotell.InteractionProxy/Message"
	InteractionProxy_Permissions_FullMethodName = "/bacotell.InteractionProxy/Permissions"
)

// InteractionProxyClient is the client API for InteractionProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InteractionProxyClient interface {
	Defer(ctx context.Context, in *InteractionProxyDeferRequest, opts ...grpc.CallOption) (*InteractionProxyDeferResponse, error)
	Respond(ctx context.Context, in *InteractionProxyRespondRequest, opts ...grpc.CallOption) (*InteractionProxyRespondResponse, error)
	Modal(ctx context.Context, in *InteractionProxyModalRequest, opts ...grpc.CallOption) (*InteractionProxyModalResponse, error)
	Followup(ctx context.Context, in *InteractionProxyFollowupRequest, opts ...grpc.CallOption) (*InteractionProxyFollowupResponse, error)
	Edit(ctx context.Context, in *InteractionProxyEditRequest, opts ...grpc.CallOption) (*InteractionProxyEditResponse, error)
	Delete(ctx context.Context, in *InteractionProxyDeleteRequest, opts ...grpc.CallOption) (*InteractionProxyDeleteResponse, error)
	GuildId(ctx context.Context, in *InteractionProxyGuildIdRequest, opts ...grpc.CallOption) (*InteractionProxyGuildIdResponse, error)
	ChannelId(ctx context.Context, in *InteractionProxyChannelIdRequest, opts ...grpc.CallOption) (*InteractionProxyChannelIdResponse, error)
	UserLocale(ctx context.Context, in *InteractionProxyUserLocaleRequest, opts ...grpc.CallOption) (*InteractionProxyUserLocaleResponse, error)
	GuildLocale(ctx context.Context, in *InteractionProxyGuildLocaleRequest, opts ...grpc.CallOption) (*InteractionProxyGuildLocaleResponse, error)
	User(ctx context.Context, in *InteractionProxyUserRequest, opts ...grpc.CallOption) (*InteractionProxyUserResponse, error)
	Member(ctx context.Context, in *InteractionProxyMemberRequest, opts ...grpc.CallOption) (*InteractionProxyMemberResponse, error)
	Message(ctx context.Context, in *InteractionProxyMessageRequest, opts ...grpc.CallOption) (*InteractionProxyMessageResponse, error)
	Permissions(ctx context.Context, in *InteractionProxyPermissionsRequest, opts ...grpc.CallOption) (*InteractionProxyPermissionsResponse, error)
}

type interactionProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewInteractionProxyClient(cc grpc.ClientConnInterface) InteractionProxyClient {
	return &interactionProxyClient{cc}
}

func (c *interactionProxyClient) Defer(ctx context.Context, in *InteractionProxyDeferRequest, opts ...grpc.CallOption) (*InteractionProxyDeferResponse, error) {
	out := new(InteractionProxyDeferResponse)
	err := c.cc.Invoke(ctx, InteractionProxy_Defer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionProxyClient) Respond(ctx context.Context, in *InteractionProxyRespondRequest, opts ...grpc.CallOption) (*InteractionProxyRespondResponse, error) {
	out := new(InteractionProxyRespondResponse)
	err := c.cc.Invoke(ctx, InteractionProxy_Respond_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionProxyClient) Modal(ctx context.Context, in *InteractionProxyModalRequest, opts ...grpc.CallOption) (*InteractionProxyModalResponse, error) {
	out := new(InteractionProxyModalResponse)
	err := c.cc.Invoke(ctx, InteractionProxy_Modal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionProxyClient) Followup(ctx context.Context, in *InteractionProxyFollowupRequest, opts ...grpc.CallOption) (*InteractionProxyFollowupResponse, error) {
	out := new(InteractionProxyFollowupResponse)
	err := c.cc.Invoke(ctx, InteractionProxy_Followup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionProxyClient) Edit(ctx context.Context, in *InteractionProxyEditRequest, opts ...grpc.CallOption) (*InteractionProxyEditResponse, error) {
	out := new(InteractionProxyEditResponse)
	err := c.cc.Invoke(ctx, InteractionProxy_Edit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionProxyClient) Delete(ctx context.Context, in *InteractionProxyDeleteRequest, opts ...grpc.CallOption) (*InteractionProxyDeleteResponse, error) {
	out := new(InteractionProxyDeleteResponse)
	err := c.cc.Invoke(ctx, InteractionProxy_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionProxyClient) GuildId(ctx context.Context, in *InteractionProxyGuildIdRequest, opts ...grpc.CallOption) (*InteractionProxyGuildIdResponse, error) {
	out := new(InteractionProxyGuildIdResponse)
	err := c.cc.Invoke(ctx, InteractionProxy_GuildId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionProxyClient) ChannelId(ctx context.Context, in *InteractionProxyChannelIdRequest, opts ...grpc.CallOption) (*InteractionProxyChannelIdResponse, error) {
	out := new(InteractionProxyChannelIdResponse)
	err := c.cc.Invoke(ctx, InteractionProxy_ChannelId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionProxyClient) UserLocale(ctx context.Context, in *InteractionProxyUserLocaleRequest, opts ...grpc.CallOption) (*InteractionProxyUserLocaleResponse, error) {
	out := new(InteractionProxyUserLocaleResponse)
	err := c.cc.Invoke(ctx, InteractionProxy_UserLocale_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionProxyClient) GuildLocale(ctx context.Context, in *InteractionProxyGuildLocaleRequest, opts ...grpc.CallOption) (*InteractionProxyGuildLocaleResponse, error) {
	out := new(InteractionProxyGuildLocaleResponse)
	err := c.cc.Invoke(ctx, InteractionProxy_GuildLocale_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionProxyClient) User(ctx context.Context, in *InteractionProxyUserRequest, opts ...grpc.CallOption) (*InteractionProxyUserResponse, error) {
	out := new(InteractionProxyUserResponse)
	err := c.cc.Invoke(ctx, InteractionProxy_User_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionProxyClient) Member(ctx context.Context, in *InteractionProxyMemberRequest, opts ...grpc.CallOption) (*InteractionProxyMemberResponse, error) {
	out := new(InteractionProxyMemberResponse)
	err := c.cc.Invoke(ctx, InteractionProxy_Member_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionProxyClient) Message(ctx context.Context, in *InteractionProxyMessageRequest, opts ...grpc.CallOption) (*InteractionProxyMessageResponse, error) {
	out := new(InteractionProxyMessageResponse)
	err := c.cc.Invoke(ctx, InteractionProxy_Message_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionProxyClient) Permissions(ctx context.Context, in *InteractionProxyPermissionsRequest, opts ...grpc.CallOption) (*InteractionProxyPermissionsResponse, error) {
	out := new(InteractionProxyPermissionsResponse)
	err := c.cc.Invoke(ctx, InteractionProxy_Permissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InteractionProxyServer is the server API for InteractionProxy service.
// All implementations must embed UnimplementedInteractionProxyServer
// for forward compatibility
type InteractionProxyServer interface {
	Defer(context.Context, *InteractionProxyDeferRequest) (*InteractionProxyDeferResponse, error)
	Respond(context.Context, *InteractionProxyRespondRequest) (*InteractionProxyRespondResponse, error)
	Modal(context.Context, *InteractionProxyModalRequest) (*InteractionProxyModalResponse, error)
	Followup(context.Context, *InteractionProxyFollowupRequest) (*InteractionProxyFollowupResponse, error)
	Edit(context.Context, *InteractionProxyEditRequest) (*InteractionProxyEditResponse, error)
	Delete(context.Context, *InteractionProxyDeleteRequest) (*InteractionProxyDeleteResponse, error)
	GuildId(context.Context, *InteractionProxyGuildIdRequest) (*InteractionProxyGuildIdResponse, error)
	ChannelId(context.Context, *InteractionProxyChannelIdRequest) (*InteractionProxyChannelIdResponse, error)
	UserLocale(context.Context, *InteractionProxyUserLocaleRequest) (*InteractionProxyUserLocaleResponse, error)
	GuildLocale(context.Context, *InteractionProxyGuildLocaleRequest) (*InteractionProxyGuildLocaleResponse, error)
	User(context.Context, *InteractionProxyUserRequest) (*InteractionProxyUserResponse, error)
	Member(context.Context, *InteractionProxyMemberRequest) (*InteractionProxyMemberResponse, error)
	Message(context.Context, *InteractionProxyMessageRequest) (*InteractionProxyMessageResponse, error)
	Permissions(context.Context, *InteractionProxyPermissionsRequest) (*InteractionProxyPermissionsResponse, error)
	mustEmbedUnimplementedInteractionProxyServer()
}

// UnimplementedInteractionProxyServer must be embedded to have forward compatible implementations.
type UnimplementedInteractionProxyServer struct {
}

func (UnimplementedInteractionProxyServer) Defer(context.Context, *InteractionProxyDeferRequest) (*InteractionProxyDeferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Defer not implemented")
}
func (UnimplementedInteractionProxyServer) Respond(context.Context, *InteractionProxyRespondRequest) (*InteractionProxyRespondResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Respond not implemented")
}
func (UnimplementedInteractionProxyServer) Modal(context.Context, *InteractionProxyModalRequest) (*InteractionProxyModalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Modal not implemented")
}
func (UnimplementedInteractionProxyServer) Followup(context.Context, *InteractionProxyFollowupRequest) (*InteractionProxyFollowupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Followup not implemented")
}
func (UnimplementedInteractionProxyServer) Edit(context.Context, *InteractionProxyEditRequest) (*InteractionProxyEditResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Edit not implemented")
}
func (UnimplementedInteractionProxyServer) Delete(context.Context, *InteractionProxyDeleteRequest) (*InteractionProxyDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedInteractionProxyServer) GuildId(context.Context, *InteractionProxyGuildIdRequest) (*InteractionProxyGuildIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildId not implemented")
}
func (UnimplementedInteractionProxyServer) ChannelId(context.Context, *InteractionProxyChannelIdRequest) (*InteractionProxyChannelIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelId not implemented")
}
func (UnimplementedInteractionProxyServer) UserLocale(context.Context, *InteractionProxyUserLocaleRequest) (*InteractionProxyUserLocaleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLocale not implemented")
}
func (UnimplementedInteractionProxyServer) GuildLocale(context.Context, *InteractionProxyGuildLocaleRequest) (*InteractionProxyGuildLocaleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildLocale not implemented")
}
func (UnimplementedInteractionProxyServer) User(context.Context, *InteractionProxyUserRequest) (*InteractionProxyUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method User not implemented")
}
func (UnimplementedInteractionProxyServer) Member(context.Context, *InteractionProxyMemberRequest) (*InteractionProxyMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Member not implemented")
}
func (UnimplementedInteractionProxyServer) Message(context.Context, *InteractionProxyMessageRequest) (*InteractionProxyMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Message not implemented")
}
func (UnimplementedInteractionProxyServer) Permissions(context.Context, *InteractionProxyPermissionsRequest) (*InteractionProxyPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Permissions not implemented")
}
func (UnimplementedInteractionProxyServer) mustEmbedUnimplementedInteractionProxyServer() {}

// UnsafeInteractionProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InteractionProxyServer will
// result in compilation errors.
type UnsafeInteractionProxyServer interface {
	mustEmbedUnimplementedInteractionProxyServer()
}

func RegisterInteractionProxyServer(s grpc.ServiceRegistrar, srv InteractionProxyServer) {
	s.RegisterService(&InteractionProxy_ServiceDesc, srv)
}

func _InteractionProxy_Defer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InteractionProxyDeferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionProxyServer).Defer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionProxy_Defer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionProxyServer).Defer(ctx, req.(*InteractionProxyDeferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionProxy_Respond_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InteractionProxyRespondRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionProxyServer).Respond(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionProxy_Respond_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionProxyServer).Respond(ctx, req.(*InteractionProxyRespondRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionProxy_Modal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InteractionProxyModalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionProxyServer).Modal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionProxy_Modal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionProxyServer).Modal(ctx, req.(*InteractionProxyModalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionProxy_Followup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InteractionProxyFollowupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionProxyServer).Followup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionProxy_Followup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionProxyServer).Followup(ctx, req.(*InteractionProxyFollowupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionProxy_Edit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InteractionProxyEditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionProxyServer).Edit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionProxy_Edit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionProxyServer).Edit(ctx, req.(*InteractionProxyEditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionProxy_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InteractionProxyDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionProxyServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionProxy_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionProxyServer).Delete(ctx, req.(*InteractionProxyDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionProxy_GuildId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InteractionProxyGuildIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionProxyServer).GuildId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionProxy_GuildId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionProxyServer).GuildId(ctx, req.(*InteractionProxyGuildIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionProxy_ChannelId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InteractionProxyChannelIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionProxyServer).ChannelId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionProxy_ChannelId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionProxyServer).ChannelId(ctx, req.(*InteractionProxyChannelIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionProxy_UserLocale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InteractionProxyUserLocaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionProxyServer).UserLocale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionProxy_UserLocale_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionProxyServer).UserLocale(ctx, req.(*InteractionProxyUserLocaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionProxy_GuildLocale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InteractionProxyGuildLocaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionProxyServer).GuildLocale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionProxy_GuildLocale_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionProxyServer).GuildLocale(ctx, req.(*InteractionProxyGuildLocaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionProxy_User_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InteractionProxyUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionProxyServer).User(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionProxy_User_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionProxyServer).User(ctx, req.(*InteractionProxyUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionProxy_Member_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InteractionProxyMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionProxyServer).Member(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionProxy_Member_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionProxyServer).Member(ctx, req.(*InteractionProxyMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionProxy_Message_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InteractionProxyMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionProxyServer).Message(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionProxy_Message_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionProxyServer).Message(ctx, req.(*InteractionProxyMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionProxy_Permissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InteractionProxyPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionProxyServer).Permissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionProxy_Permissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionProxyServer).Permissions(ctx, req.(*InteractionProxyPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InteractionProxy_ServiceDesc is the grpc.ServiceDesc for InteractionProxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InteractionProxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bacotell.InteractionProxy",
	HandlerType: (*InteractionProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Defer",
			Handler:    _InteractionProxy_Defer_Handler,
		},
		{
			MethodName: "Respond",
			Handler:    _InteractionProxy_Respond_Handler,
		},
		{
			MethodName: "Modal",
			Handler:    _InteractionProxy_Modal_Handler,
		},
		{
			MethodName: "Followup",
			Handler:    _InteractionProxy_Followup_Handler,
		},
		{
			MethodName: "Edit",
			Handler:    _InteractionProxy_Edit_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _InteractionProxy_Delete_Handler,
		},
		{
			MethodName: "GuildId",
			Handler:    _InteractionProxy_GuildId_Handler,
		},
		{
			MethodName: "ChannelId",
			Handler:    _InteractionProxy_ChannelId_Handler,
		},
		{
			MethodName: "UserLocale",
			Handler:    _InteractionProxy_UserLocale_Handler,
		},
		{
			MethodName: "GuildLocale",
			Handler:    _InteractionProxy_GuildLocale_Handler,
		},
		{
			MethodName: "User",
			Handler:    _InteractionProxy_User_Handler,
		},
		{
			MethodName: "Member",
			Handler:    _InteractionProxy_Member_Handler,
		},
		{
			MethodName: "Message",
			Handler:    _InteractionProxy_Message_Handler,
		},
		{
			MethodName: "Permissions",
			Handler:    _InteractionProxy_Permissions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/bacotell_interaction.proto",
}
