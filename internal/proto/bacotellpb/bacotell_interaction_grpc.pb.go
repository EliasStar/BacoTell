// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.0
// source: proto/bacotell_interaction.proto

package bacotellpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	InteractionProxy_Defer_FullMethodName    = "/bacotell.InteractionProxy/Defer"
	InteractionProxy_Respond_FullMethodName  = "/bacotell.InteractionProxy/Respond"
	InteractionProxy_Followup_FullMethodName = "/bacotell.InteractionProxy/Followup"
	InteractionProxy_Edit_FullMethodName     = "/bacotell.InteractionProxy/Edit"
	InteractionProxy_Delete_FullMethodName   = "/bacotell.InteractionProxy/Delete"
)

// InteractionProxyClient is the client API for InteractionProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InteractionProxyClient interface {
	Defer(ctx context.Context, in *DeferRequest, opts ...grpc.CallOption) (*DeferResponse, error)
	Respond(ctx context.Context, in *RespondRequest, opts ...grpc.CallOption) (*RespondResponse, error)
	Followup(ctx context.Context, in *FollowupRequest, opts ...grpc.CallOption) (*FollowupResponse, error)
	Edit(ctx context.Context, in *EditRequest, opts ...grpc.CallOption) (*EditResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type interactionProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewInteractionProxyClient(cc grpc.ClientConnInterface) InteractionProxyClient {
	return &interactionProxyClient{cc}
}

func (c *interactionProxyClient) Defer(ctx context.Context, in *DeferRequest, opts ...grpc.CallOption) (*DeferResponse, error) {
	out := new(DeferResponse)
	err := c.cc.Invoke(ctx, InteractionProxy_Defer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionProxyClient) Respond(ctx context.Context, in *RespondRequest, opts ...grpc.CallOption) (*RespondResponse, error) {
	out := new(RespondResponse)
	err := c.cc.Invoke(ctx, InteractionProxy_Respond_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionProxyClient) Followup(ctx context.Context, in *FollowupRequest, opts ...grpc.CallOption) (*FollowupResponse, error) {
	out := new(FollowupResponse)
	err := c.cc.Invoke(ctx, InteractionProxy_Followup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionProxyClient) Edit(ctx context.Context, in *EditRequest, opts ...grpc.CallOption) (*EditResponse, error) {
	out := new(EditResponse)
	err := c.cc.Invoke(ctx, InteractionProxy_Edit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionProxyClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, InteractionProxy_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InteractionProxyServer is the server API for InteractionProxy service.
// All implementations must embed UnimplementedInteractionProxyServer
// for forward compatibility
type InteractionProxyServer interface {
	Defer(context.Context, *DeferRequest) (*DeferResponse, error)
	Respond(context.Context, *RespondRequest) (*RespondResponse, error)
	Followup(context.Context, *FollowupRequest) (*FollowupResponse, error)
	Edit(context.Context, *EditRequest) (*EditResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	mustEmbedUnimplementedInteractionProxyServer()
}

// UnimplementedInteractionProxyServer must be embedded to have forward compatible implementations.
type UnimplementedInteractionProxyServer struct {
}

func (UnimplementedInteractionProxyServer) Defer(context.Context, *DeferRequest) (*DeferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Defer not implemented")
}
func (UnimplementedInteractionProxyServer) Respond(context.Context, *RespondRequest) (*RespondResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Respond not implemented")
}
func (UnimplementedInteractionProxyServer) Followup(context.Context, *FollowupRequest) (*FollowupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Followup not implemented")
}
func (UnimplementedInteractionProxyServer) Edit(context.Context, *EditRequest) (*EditResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Edit not implemented")
}
func (UnimplementedInteractionProxyServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedInteractionProxyServer) mustEmbedUnimplementedInteractionProxyServer() {}

// UnsafeInteractionProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InteractionProxyServer will
// result in compilation errors.
type UnsafeInteractionProxyServer interface {
	mustEmbedUnimplementedInteractionProxyServer()
}

func RegisterInteractionProxyServer(s grpc.ServiceRegistrar, srv InteractionProxyServer) {
	s.RegisterService(&InteractionProxy_ServiceDesc, srv)
}

func _InteractionProxy_Defer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionProxyServer).Defer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionProxy_Defer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionProxyServer).Defer(ctx, req.(*DeferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionProxy_Respond_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RespondRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionProxyServer).Respond(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionProxy_Respond_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionProxyServer).Respond(ctx, req.(*RespondRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionProxy_Followup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionProxyServer).Followup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionProxy_Followup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionProxyServer).Followup(ctx, req.(*FollowupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionProxy_Edit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionProxyServer).Edit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionProxy_Edit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionProxyServer).Edit(ctx, req.(*EditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionProxy_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionProxyServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionProxy_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionProxyServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InteractionProxy_ServiceDesc is the grpc.ServiceDesc for InteractionProxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InteractionProxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bacotell.InteractionProxy",
	HandlerType: (*InteractionProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Defer",
			Handler:    _InteractionProxy_Defer_Handler,
		},
		{
			MethodName: "Respond",
			Handler:    _InteractionProxy_Respond_Handler,
		},
		{
			MethodName: "Followup",
			Handler:    _InteractionProxy_Followup_Handler,
		},
		{
			MethodName: "Edit",
			Handler:    _InteractionProxy_Edit_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _InteractionProxy_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/bacotell_interaction.proto",
}
