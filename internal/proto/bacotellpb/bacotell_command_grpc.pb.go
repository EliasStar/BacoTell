// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.0
// source: proto/bacotell_command.proto

package bacotellpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Command_CommandData_FullMethodName = "/bacotell.Command/CommandData"
	Command_Execute_FullMethodName     = "/bacotell.Command/Execute"
)

// CommandClient is the client API for Command service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommandClient interface {
	CommandData(ctx context.Context, in *CommandDataRequest, opts ...grpc.CallOption) (*CommandDataResponse, error)
	Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error)
}

type commandClient struct {
	cc grpc.ClientConnInterface
}

func NewCommandClient(cc grpc.ClientConnInterface) CommandClient {
	return &commandClient{cc}
}

func (c *commandClient) CommandData(ctx context.Context, in *CommandDataRequest, opts ...grpc.CallOption) (*CommandDataResponse, error) {
	out := new(CommandDataResponse)
	err := c.cc.Invoke(ctx, Command_CommandData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandClient) Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error) {
	out := new(ExecuteResponse)
	err := c.cc.Invoke(ctx, Command_Execute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommandServer is the server API for Command service.
// All implementations must embed UnimplementedCommandServer
// for forward compatibility
type CommandServer interface {
	CommandData(context.Context, *CommandDataRequest) (*CommandDataResponse, error)
	Execute(context.Context, *ExecuteRequest) (*ExecuteResponse, error)
	mustEmbedUnimplementedCommandServer()
}

// UnimplementedCommandServer must be embedded to have forward compatible implementations.
type UnimplementedCommandServer struct {
}

func (UnimplementedCommandServer) CommandData(context.Context, *CommandDataRequest) (*CommandDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandData not implemented")
}
func (UnimplementedCommandServer) Execute(context.Context, *ExecuteRequest) (*ExecuteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedCommandServer) mustEmbedUnimplementedCommandServer() {}

// UnsafeCommandServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommandServer will
// result in compilation errors.
type UnsafeCommandServer interface {
	mustEmbedUnimplementedCommandServer()
}

func RegisterCommandServer(s grpc.ServiceRegistrar, srv CommandServer) {
	s.RegisterService(&Command_ServiceDesc, srv)
}

func _Command_CommandData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandServer).CommandData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Command_CommandData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandServer).CommandData(ctx, req.(*CommandDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Command_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Command_Execute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandServer).Execute(ctx, req.(*ExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Command_ServiceDesc is the grpc.ServiceDesc for Command service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Command_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bacotell.Command",
	HandlerType: (*CommandServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CommandData",
			Handler:    _Command_CommandData_Handler,
		},
		{
			MethodName: "Execute",
			Handler:    _Command_Execute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/bacotell_command.proto",
}

const (
	ExecuteProxy_StringOption_FullMethodName     = "/bacotell.ExecuteProxy/StringOption"
	ExecuteProxy_IntegerOption_FullMethodName    = "/bacotell.ExecuteProxy/IntegerOption"
	ExecuteProxy_NumberOption_FullMethodName     = "/bacotell.ExecuteProxy/NumberOption"
	ExecuteProxy_BooleanOption_FullMethodName    = "/bacotell.ExecuteProxy/BooleanOption"
	ExecuteProxy_UserOption_FullMethodName       = "/bacotell.ExecuteProxy/UserOption"
	ExecuteProxy_RoleOption_FullMethodName       = "/bacotell.ExecuteProxy/RoleOption"
	ExecuteProxy_ChannelOption_FullMethodName    = "/bacotell.ExecuteProxy/ChannelOption"
	ExecuteProxy_AttachmentOption_FullMethodName = "/bacotell.ExecuteProxy/AttachmentOption"
)

// ExecuteProxyClient is the client API for ExecuteProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExecuteProxyClient interface {
	StringOption(ctx context.Context, in *StringOptionRequest, opts ...grpc.CallOption) (*StringOptionResponse, error)
	IntegerOption(ctx context.Context, in *IntegerOptionRequest, opts ...grpc.CallOption) (*IntegerOptionResponse, error)
	NumberOption(ctx context.Context, in *NumberOptionRequest, opts ...grpc.CallOption) (*NumberOptionResponse, error)
	BooleanOption(ctx context.Context, in *BooleanOptionRequest, opts ...grpc.CallOption) (*BooleanOptionResponse, error)
	UserOption(ctx context.Context, in *UserOptionRequest, opts ...grpc.CallOption) (*UserOptionResponse, error)
	RoleOption(ctx context.Context, in *RoleOptionRequest, opts ...grpc.CallOption) (*RoleOptionResponse, error)
	ChannelOption(ctx context.Context, in *ChannelOptionRequest, opts ...grpc.CallOption) (*ChannelOptionResponse, error)
	AttachmentOption(ctx context.Context, in *AttachmentOptionRequest, opts ...grpc.CallOption) (*AttachmentOptionResponse, error)
}

type executeProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewExecuteProxyClient(cc grpc.ClientConnInterface) ExecuteProxyClient {
	return &executeProxyClient{cc}
}

func (c *executeProxyClient) StringOption(ctx context.Context, in *StringOptionRequest, opts ...grpc.CallOption) (*StringOptionResponse, error) {
	out := new(StringOptionResponse)
	err := c.cc.Invoke(ctx, ExecuteProxy_StringOption_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executeProxyClient) IntegerOption(ctx context.Context, in *IntegerOptionRequest, opts ...grpc.CallOption) (*IntegerOptionResponse, error) {
	out := new(IntegerOptionResponse)
	err := c.cc.Invoke(ctx, ExecuteProxy_IntegerOption_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executeProxyClient) NumberOption(ctx context.Context, in *NumberOptionRequest, opts ...grpc.CallOption) (*NumberOptionResponse, error) {
	out := new(NumberOptionResponse)
	err := c.cc.Invoke(ctx, ExecuteProxy_NumberOption_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executeProxyClient) BooleanOption(ctx context.Context, in *BooleanOptionRequest, opts ...grpc.CallOption) (*BooleanOptionResponse, error) {
	out := new(BooleanOptionResponse)
	err := c.cc.Invoke(ctx, ExecuteProxy_BooleanOption_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executeProxyClient) UserOption(ctx context.Context, in *UserOptionRequest, opts ...grpc.CallOption) (*UserOptionResponse, error) {
	out := new(UserOptionResponse)
	err := c.cc.Invoke(ctx, ExecuteProxy_UserOption_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executeProxyClient) RoleOption(ctx context.Context, in *RoleOptionRequest, opts ...grpc.CallOption) (*RoleOptionResponse, error) {
	out := new(RoleOptionResponse)
	err := c.cc.Invoke(ctx, ExecuteProxy_RoleOption_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executeProxyClient) ChannelOption(ctx context.Context, in *ChannelOptionRequest, opts ...grpc.CallOption) (*ChannelOptionResponse, error) {
	out := new(ChannelOptionResponse)
	err := c.cc.Invoke(ctx, ExecuteProxy_ChannelOption_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executeProxyClient) AttachmentOption(ctx context.Context, in *AttachmentOptionRequest, opts ...grpc.CallOption) (*AttachmentOptionResponse, error) {
	out := new(AttachmentOptionResponse)
	err := c.cc.Invoke(ctx, ExecuteProxy_AttachmentOption_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExecuteProxyServer is the server API for ExecuteProxy service.
// All implementations must embed UnimplementedExecuteProxyServer
// for forward compatibility
type ExecuteProxyServer interface {
	StringOption(context.Context, *StringOptionRequest) (*StringOptionResponse, error)
	IntegerOption(context.Context, *IntegerOptionRequest) (*IntegerOptionResponse, error)
	NumberOption(context.Context, *NumberOptionRequest) (*NumberOptionResponse, error)
	BooleanOption(context.Context, *BooleanOptionRequest) (*BooleanOptionResponse, error)
	UserOption(context.Context, *UserOptionRequest) (*UserOptionResponse, error)
	RoleOption(context.Context, *RoleOptionRequest) (*RoleOptionResponse, error)
	ChannelOption(context.Context, *ChannelOptionRequest) (*ChannelOptionResponse, error)
	AttachmentOption(context.Context, *AttachmentOptionRequest) (*AttachmentOptionResponse, error)
	mustEmbedUnimplementedExecuteProxyServer()
}

// UnimplementedExecuteProxyServer must be embedded to have forward compatible implementations.
type UnimplementedExecuteProxyServer struct {
}

func (UnimplementedExecuteProxyServer) StringOption(context.Context, *StringOptionRequest) (*StringOptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StringOption not implemented")
}
func (UnimplementedExecuteProxyServer) IntegerOption(context.Context, *IntegerOptionRequest) (*IntegerOptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IntegerOption not implemented")
}
func (UnimplementedExecuteProxyServer) NumberOption(context.Context, *NumberOptionRequest) (*NumberOptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NumberOption not implemented")
}
func (UnimplementedExecuteProxyServer) BooleanOption(context.Context, *BooleanOptionRequest) (*BooleanOptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BooleanOption not implemented")
}
func (UnimplementedExecuteProxyServer) UserOption(context.Context, *UserOptionRequest) (*UserOptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserOption not implemented")
}
func (UnimplementedExecuteProxyServer) RoleOption(context.Context, *RoleOptionRequest) (*RoleOptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleOption not implemented")
}
func (UnimplementedExecuteProxyServer) ChannelOption(context.Context, *ChannelOptionRequest) (*ChannelOptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelOption not implemented")
}
func (UnimplementedExecuteProxyServer) AttachmentOption(context.Context, *AttachmentOptionRequest) (*AttachmentOptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachmentOption not implemented")
}
func (UnimplementedExecuteProxyServer) mustEmbedUnimplementedExecuteProxyServer() {}

// UnsafeExecuteProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExecuteProxyServer will
// result in compilation errors.
type UnsafeExecuteProxyServer interface {
	mustEmbedUnimplementedExecuteProxyServer()
}

func RegisterExecuteProxyServer(s grpc.ServiceRegistrar, srv ExecuteProxyServer) {
	s.RegisterService(&ExecuteProxy_ServiceDesc, srv)
}

func _ExecuteProxy_StringOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringOptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecuteProxyServer).StringOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecuteProxy_StringOption_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecuteProxyServer).StringOption(ctx, req.(*StringOptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecuteProxy_IntegerOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntegerOptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecuteProxyServer).IntegerOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecuteProxy_IntegerOption_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecuteProxyServer).IntegerOption(ctx, req.(*IntegerOptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecuteProxy_NumberOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumberOptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecuteProxyServer).NumberOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecuteProxy_NumberOption_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecuteProxyServer).NumberOption(ctx, req.(*NumberOptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecuteProxy_BooleanOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BooleanOptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecuteProxyServer).BooleanOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecuteProxy_BooleanOption_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecuteProxyServer).BooleanOption(ctx, req.(*BooleanOptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecuteProxy_UserOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserOptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecuteProxyServer).UserOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecuteProxy_UserOption_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecuteProxyServer).UserOption(ctx, req.(*UserOptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecuteProxy_RoleOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleOptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecuteProxyServer).RoleOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecuteProxy_RoleOption_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecuteProxyServer).RoleOption(ctx, req.(*RoleOptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecuteProxy_ChannelOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelOptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecuteProxyServer).ChannelOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecuteProxy_ChannelOption_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecuteProxyServer).ChannelOption(ctx, req.(*ChannelOptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecuteProxy_AttachmentOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachmentOptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecuteProxyServer).AttachmentOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecuteProxy_AttachmentOption_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecuteProxyServer).AttachmentOption(ctx, req.(*AttachmentOptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExecuteProxy_ServiceDesc is the grpc.ServiceDesc for ExecuteProxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExecuteProxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bacotell.ExecuteProxy",
	HandlerType: (*ExecuteProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StringOption",
			Handler:    _ExecuteProxy_StringOption_Handler,
		},
		{
			MethodName: "IntegerOption",
			Handler:    _ExecuteProxy_IntegerOption_Handler,
		},
		{
			MethodName: "NumberOption",
			Handler:    _ExecuteProxy_NumberOption_Handler,
		},
		{
			MethodName: "BooleanOption",
			Handler:    _ExecuteProxy_BooleanOption_Handler,
		},
		{
			MethodName: "UserOption",
			Handler:    _ExecuteProxy_UserOption_Handler,
		},
		{
			MethodName: "RoleOption",
			Handler:    _ExecuteProxy_RoleOption_Handler,
		},
		{
			MethodName: "ChannelOption",
			Handler:    _ExecuteProxy_ChannelOption_Handler,
		},
		{
			MethodName: "AttachmentOption",
			Handler:    _ExecuteProxy_AttachmentOption_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/bacotell_command.proto",
}
