// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.0
// source: proto/bacotell_modal.proto

package bacotellpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Modal_CustomId_FullMethodName = "/bacotell.Modal/CustomId"
	Modal_Submit_FullMethodName   = "/bacotell.Modal/Submit"
)

// ModalClient is the client API for Modal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModalClient interface {
	CustomId(ctx context.Context, in *ModalCustomIdRequest, opts ...grpc.CallOption) (*ModalCustomIdResponse, error)
	Submit(ctx context.Context, in *ModalSubmitRequest, opts ...grpc.CallOption) (*ModalSubmitResponse, error)
}

type modalClient struct {
	cc grpc.ClientConnInterface
}

func NewModalClient(cc grpc.ClientConnInterface) ModalClient {
	return &modalClient{cc}
}

func (c *modalClient) CustomId(ctx context.Context, in *ModalCustomIdRequest, opts ...grpc.CallOption) (*ModalCustomIdResponse, error) {
	out := new(ModalCustomIdResponse)
	err := c.cc.Invoke(ctx, Modal_CustomId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modalClient) Submit(ctx context.Context, in *ModalSubmitRequest, opts ...grpc.CallOption) (*ModalSubmitResponse, error) {
	out := new(ModalSubmitResponse)
	err := c.cc.Invoke(ctx, Modal_Submit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModalServer is the server API for Modal service.
// All implementations must embed UnimplementedModalServer
// for forward compatibility
type ModalServer interface {
	CustomId(context.Context, *ModalCustomIdRequest) (*ModalCustomIdResponse, error)
	Submit(context.Context, *ModalSubmitRequest) (*ModalSubmitResponse, error)
	mustEmbedUnimplementedModalServer()
}

// UnimplementedModalServer must be embedded to have forward compatible implementations.
type UnimplementedModalServer struct {
}

func (UnimplementedModalServer) CustomId(context.Context, *ModalCustomIdRequest) (*ModalCustomIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomId not implemented")
}
func (UnimplementedModalServer) Submit(context.Context, *ModalSubmitRequest) (*ModalSubmitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Submit not implemented")
}
func (UnimplementedModalServer) mustEmbedUnimplementedModalServer() {}

// UnsafeModalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModalServer will
// result in compilation errors.
type UnsafeModalServer interface {
	mustEmbedUnimplementedModalServer()
}

func RegisterModalServer(s grpc.ServiceRegistrar, srv ModalServer) {
	s.RegisterService(&Modal_ServiceDesc, srv)
}

func _Modal_CustomId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModalCustomIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalServer).CustomId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Modal_CustomId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalServer).CustomId(ctx, req.(*ModalCustomIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Modal_Submit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModalSubmitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalServer).Submit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Modal_Submit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalServer).Submit(ctx, req.(*ModalSubmitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Modal_ServiceDesc is the grpc.ServiceDesc for Modal service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Modal_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bacotell.Modal",
	HandlerType: (*ModalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CustomId",
			Handler:    _Modal_CustomId_Handler,
		},
		{
			MethodName: "Submit",
			Handler:    _Modal_Submit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/bacotell_modal.proto",
}

const ()

// SubmitProxyClient is the client API for SubmitProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubmitProxyClient interface {
}

type submitProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewSubmitProxyClient(cc grpc.ClientConnInterface) SubmitProxyClient {
	return &submitProxyClient{cc}
}

// SubmitProxyServer is the server API for SubmitProxy service.
// All implementations must embed UnimplementedSubmitProxyServer
// for forward compatibility
type SubmitProxyServer interface {
	mustEmbedUnimplementedSubmitProxyServer()
}

// UnimplementedSubmitProxyServer must be embedded to have forward compatible implementations.
type UnimplementedSubmitProxyServer struct {
}

func (UnimplementedSubmitProxyServer) mustEmbedUnimplementedSubmitProxyServer() {}

// UnsafeSubmitProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubmitProxyServer will
// result in compilation errors.
type UnsafeSubmitProxyServer interface {
	mustEmbedUnimplementedSubmitProxyServer()
}

func RegisterSubmitProxyServer(s grpc.ServiceRegistrar, srv SubmitProxyServer) {
	s.RegisterService(&SubmitProxy_ServiceDesc, srv)
}

// SubmitProxy_ServiceDesc is the grpc.ServiceDesc for SubmitProxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubmitProxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bacotell.SubmitProxy",
	HandlerType: (*SubmitProxyServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "proto/bacotell_modal.proto",
}
