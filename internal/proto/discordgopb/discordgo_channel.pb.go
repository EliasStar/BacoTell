// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.23.0
// source: proto/discordgo_channel.proto

package discordgopb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Channel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	GuildId                       string                 `protobuf:"bytes,2,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	Name                          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Topic                         string                 `protobuf:"bytes,4,opt,name=topic,proto3" json:"topic,omitempty"`
	Type                          int32                  `protobuf:"varint,5,opt,name=type,proto3" json:"type,omitempty"`
	LastMessageId                 string                 `protobuf:"bytes,6,opt,name=last_message_id,json=lastMessageId,proto3" json:"last_message_id,omitempty"`
	LastPinTimestamp              *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=last_pin_timestamp,json=lastPinTimestamp,proto3" json:"last_pin_timestamp,omitempty"`
	MessageCount                  int32                  `protobuf:"varint,8,opt,name=message_count,json=messageCount,proto3" json:"message_count,omitempty"`
	MemberCount                   int32                  `protobuf:"varint,9,opt,name=member_count,json=memberCount,proto3" json:"member_count,omitempty"`
	Nsfw                          bool                   `protobuf:"varint,10,opt,name=nsfw,proto3" json:"nsfw,omitempty"`
	Icon                          string                 `protobuf:"bytes,11,opt,name=icon,proto3" json:"icon,omitempty"`
	Position                      int32                  `protobuf:"varint,12,opt,name=position,proto3" json:"position,omitempty"`
	Bitrate                       int32                  `protobuf:"varint,13,opt,name=bitrate,proto3" json:"bitrate,omitempty"`
	Recipients                    []*User                `protobuf:"bytes,14,rep,name=recipients,proto3" json:"recipients,omitempty"`
	Messages                      []*Message             `protobuf:"bytes,15,rep,name=messages,proto3" json:"messages,omitempty"`
	PermissionOverwrites          []*PermissionOverwrite `protobuf:"bytes,16,rep,name=permission_overwrites,json=permissionOverwrites,proto3" json:"permission_overwrites,omitempty"`
	UserLimit                     int32                  `protobuf:"varint,17,opt,name=user_limit,json=userLimit,proto3" json:"user_limit,omitempty"`
	ParentId                      string                 `protobuf:"bytes,18,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	RateLimitPerUser              int32                  `protobuf:"varint,19,opt,name=rate_limit_per_user,json=rateLimitPerUser,proto3" json:"rate_limit_per_user,omitempty"`
	OwnerId                       string                 `protobuf:"bytes,20,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	ApplicationId                 string                 `protobuf:"bytes,21,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	ThreadMetadata                *ThreadMetadata        `protobuf:"bytes,22,opt,name=thread_metadata,json=threadMetadata,proto3" json:"thread_metadata,omitempty"`
	Member                        *ThreadMember          `protobuf:"bytes,23,opt,name=member,proto3" json:"member,omitempty"`
	Members                       []*ThreadMember        `protobuf:"bytes,24,rep,name=members,proto3" json:"members,omitempty"`
	Flags                         int32                  `protobuf:"varint,25,opt,name=flags,proto3" json:"flags,omitempty"`
	AvailableTags                 []*ForumTag            `protobuf:"bytes,26,rep,name=available_tags,json=availableTags,proto3" json:"available_tags,omitempty"`
	AppliedTags                   []string               `protobuf:"bytes,27,rep,name=applied_tags,json=appliedTags,proto3" json:"applied_tags,omitempty"`
	DefaultReactionEmoji          *ForumDefaultReaction  `protobuf:"bytes,28,opt,name=default_reaction_emoji,json=defaultReactionEmoji,proto3" json:"default_reaction_emoji,omitempty"`
	DefaultThreadRateLimitPerUser int32                  `protobuf:"varint,29,opt,name=default_thread_rate_limit_per_user,json=defaultThreadRateLimitPerUser,proto3" json:"default_thread_rate_limit_per_user,omitempty"`
	DefaultSortOrder              *int32                 `protobuf:"varint,30,opt,name=default_sort_order,json=defaultSortOrder,proto3,oneof" json:"default_sort_order,omitempty"`
	DefaultForumLayout            int32                  `protobuf:"varint,31,opt,name=default_forum_layout,json=defaultForumLayout,proto3" json:"default_forum_layout,omitempty"`
}

func (x *Channel) Reset() {
	*x = Channel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_discordgo_channel_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Channel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Channel) ProtoMessage() {}

func (x *Channel) ProtoReflect() protoreflect.Message {
	mi := &file_proto_discordgo_channel_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Channel.ProtoReflect.Descriptor instead.
func (*Channel) Descriptor() ([]byte, []int) {
	return file_proto_discordgo_channel_proto_rawDescGZIP(), []int{0}
}

func (x *Channel) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Channel) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

func (x *Channel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Channel) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *Channel) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Channel) GetLastMessageId() string {
	if x != nil {
		return x.LastMessageId
	}
	return ""
}

func (x *Channel) GetLastPinTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.LastPinTimestamp
	}
	return nil
}

func (x *Channel) GetMessageCount() int32 {
	if x != nil {
		return x.MessageCount
	}
	return 0
}

func (x *Channel) GetMemberCount() int32 {
	if x != nil {
		return x.MemberCount
	}
	return 0
}

func (x *Channel) GetNsfw() bool {
	if x != nil {
		return x.Nsfw
	}
	return false
}

func (x *Channel) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *Channel) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *Channel) GetBitrate() int32 {
	if x != nil {
		return x.Bitrate
	}
	return 0
}

func (x *Channel) GetRecipients() []*User {
	if x != nil {
		return x.Recipients
	}
	return nil
}

func (x *Channel) GetMessages() []*Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *Channel) GetPermissionOverwrites() []*PermissionOverwrite {
	if x != nil {
		return x.PermissionOverwrites
	}
	return nil
}

func (x *Channel) GetUserLimit() int32 {
	if x != nil {
		return x.UserLimit
	}
	return 0
}

func (x *Channel) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *Channel) GetRateLimitPerUser() int32 {
	if x != nil {
		return x.RateLimitPerUser
	}
	return 0
}

func (x *Channel) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *Channel) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *Channel) GetThreadMetadata() *ThreadMetadata {
	if x != nil {
		return x.ThreadMetadata
	}
	return nil
}

func (x *Channel) GetMember() *ThreadMember {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *Channel) GetMembers() []*ThreadMember {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *Channel) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *Channel) GetAvailableTags() []*ForumTag {
	if x != nil {
		return x.AvailableTags
	}
	return nil
}

func (x *Channel) GetAppliedTags() []string {
	if x != nil {
		return x.AppliedTags
	}
	return nil
}

func (x *Channel) GetDefaultReactionEmoji() *ForumDefaultReaction {
	if x != nil {
		return x.DefaultReactionEmoji
	}
	return nil
}

func (x *Channel) GetDefaultThreadRateLimitPerUser() int32 {
	if x != nil {
		return x.DefaultThreadRateLimitPerUser
	}
	return 0
}

func (x *Channel) GetDefaultSortOrder() int32 {
	if x != nil && x.DefaultSortOrder != nil {
		return *x.DefaultSortOrder
	}
	return 0
}

func (x *Channel) GetDefaultForumLayout() int32 {
	if x != nil {
		return x.DefaultForumLayout
	}
	return 0
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ChannelId         string                 `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	GuildId           string                 `protobuf:"bytes,3,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	Content           string                 `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	Timestamp         *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	EditedTimestamp   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=edited_timestamp,json=editedTimestamp,proto3" json:"edited_timestamp,omitempty"`
	MentionRoles      []string               `protobuf:"bytes,7,rep,name=mention_roles,json=mentionRoles,proto3" json:"mention_roles,omitempty"`
	Tts               bool                   `protobuf:"varint,8,opt,name=tts,proto3" json:"tts,omitempty"`
	MentionEveryone   bool                   `protobuf:"varint,9,opt,name=mention_everyone,json=mentionEveryone,proto3" json:"mention_everyone,omitempty"`
	Author            *User                  `protobuf:"bytes,10,opt,name=author,proto3" json:"author,omitempty"`
	Attachments       []*MessageAttachment   `protobuf:"bytes,11,rep,name=attachments,proto3" json:"attachments,omitempty"`
	Components        []*MessageComponent    `protobuf:"bytes,12,rep,name=components,proto3" json:"components,omitempty"`
	Embeds            []*MessageEmbed        `protobuf:"bytes,13,rep,name=embeds,proto3" json:"embeds,omitempty"`
	Mentions          []*User                `protobuf:"bytes,14,rep,name=mentions,proto3" json:"mentions,omitempty"`
	Reactions         []*MessageReactions    `protobuf:"bytes,15,rep,name=reactions,proto3" json:"reactions,omitempty"`
	Pinned            bool                   `protobuf:"varint,16,opt,name=pinned,proto3" json:"pinned,omitempty"`
	Type              int32                  `protobuf:"varint,17,opt,name=type,proto3" json:"type,omitempty"`
	WebhookId         string                 `protobuf:"bytes,18,opt,name=webhook_id,json=webhookId,proto3" json:"webhook_id,omitempty"`
	Member            *Member                `protobuf:"bytes,19,opt,name=member,proto3" json:"member,omitempty"`
	MentionChannels   []*Channel             `protobuf:"bytes,20,rep,name=mention_channels,json=mentionChannels,proto3" json:"mention_channels,omitempty"`
	Activity          *MessageActivity       `protobuf:"bytes,21,opt,name=activity,proto3" json:"activity,omitempty"`
	Application       *MessageApplication    `protobuf:"bytes,22,opt,name=application,proto3" json:"application,omitempty"`
	MessageReference  *MessageReference      `protobuf:"bytes,23,opt,name=message_reference,json=messageReference,proto3" json:"message_reference,omitempty"`
	ReferencedMessage *Message               `protobuf:"bytes,24,opt,name=referenced_message,json=referencedMessage,proto3" json:"referenced_message,omitempty"`
	Interaction       *MessageInteraction    `protobuf:"bytes,25,opt,name=interaction,proto3" json:"interaction,omitempty"`
	Flags             int32                  `protobuf:"varint,26,opt,name=flags,proto3" json:"flags,omitempty"`
	Thread            *Channel               `protobuf:"bytes,27,opt,name=thread,proto3" json:"thread,omitempty"`
	StickerItems      []*Sticker             `protobuf:"bytes,28,rep,name=sticker_items,json=stickerItems,proto3" json:"sticker_items,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_discordgo_channel_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_proto_discordgo_channel_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_proto_discordgo_channel_proto_rawDescGZIP(), []int{1}
}

func (x *Message) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Message) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *Message) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

func (x *Message) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Message) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Message) GetEditedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.EditedTimestamp
	}
	return nil
}

func (x *Message) GetMentionRoles() []string {
	if x != nil {
		return x.MentionRoles
	}
	return nil
}

func (x *Message) GetTts() bool {
	if x != nil {
		return x.Tts
	}
	return false
}

func (x *Message) GetMentionEveryone() bool {
	if x != nil {
		return x.MentionEveryone
	}
	return false
}

func (x *Message) GetAuthor() *User {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *Message) GetAttachments() []*MessageAttachment {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *Message) GetComponents() []*MessageComponent {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *Message) GetEmbeds() []*MessageEmbed {
	if x != nil {
		return x.Embeds
	}
	return nil
}

func (x *Message) GetMentions() []*User {
	if x != nil {
		return x.Mentions
	}
	return nil
}

func (x *Message) GetReactions() []*MessageReactions {
	if x != nil {
		return x.Reactions
	}
	return nil
}

func (x *Message) GetPinned() bool {
	if x != nil {
		return x.Pinned
	}
	return false
}

func (x *Message) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Message) GetWebhookId() string {
	if x != nil {
		return x.WebhookId
	}
	return ""
}

func (x *Message) GetMember() *Member {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *Message) GetMentionChannels() []*Channel {
	if x != nil {
		return x.MentionChannels
	}
	return nil
}

func (x *Message) GetActivity() *MessageActivity {
	if x != nil {
		return x.Activity
	}
	return nil
}

func (x *Message) GetApplication() *MessageApplication {
	if x != nil {
		return x.Application
	}
	return nil
}

func (x *Message) GetMessageReference() *MessageReference {
	if x != nil {
		return x.MessageReference
	}
	return nil
}

func (x *Message) GetReferencedMessage() *Message {
	if x != nil {
		return x.ReferencedMessage
	}
	return nil
}

func (x *Message) GetInteraction() *MessageInteraction {
	if x != nil {
		return x.Interaction
	}
	return nil
}

func (x *Message) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *Message) GetThread() *Channel {
	if x != nil {
		return x.Thread
	}
	return nil
}

func (x *Message) GetStickerItems() []*Sticker {
	if x != nil {
		return x.StickerItems
	}
	return nil
}

type PermissionOverwrite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type  int32  `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Allow int64  `protobuf:"varint,3,opt,name=allow,proto3" json:"allow,omitempty"`
	Deny  int64  `protobuf:"varint,4,opt,name=deny,proto3" json:"deny,omitempty"`
}

func (x *PermissionOverwrite) Reset() {
	*x = PermissionOverwrite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_discordgo_channel_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionOverwrite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionOverwrite) ProtoMessage() {}

func (x *PermissionOverwrite) ProtoReflect() protoreflect.Message {
	mi := &file_proto_discordgo_channel_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionOverwrite.ProtoReflect.Descriptor instead.
func (*PermissionOverwrite) Descriptor() ([]byte, []int) {
	return file_proto_discordgo_channel_proto_rawDescGZIP(), []int{2}
}

func (x *PermissionOverwrite) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PermissionOverwrite) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *PermissionOverwrite) GetAllow() int64 {
	if x != nil {
		return x.Allow
	}
	return 0
}

func (x *PermissionOverwrite) GetDeny() int64 {
	if x != nil {
		return x.Deny
	}
	return 0
}

type ThreadMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Archived            bool                   `protobuf:"varint,1,opt,name=archived,proto3" json:"archived,omitempty"`
	AutoArchiveDuration int32                  `protobuf:"varint,2,opt,name=auto_archive_duration,json=autoArchiveDuration,proto3" json:"auto_archive_duration,omitempty"`
	ArchiveTimestamp    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=archive_timestamp,json=archiveTimestamp,proto3" json:"archive_timestamp,omitempty"`
	Locked              bool                   `protobuf:"varint,4,opt,name=locked,proto3" json:"locked,omitempty"`
	Invitable           bool                   `protobuf:"varint,5,opt,name=invitable,proto3" json:"invitable,omitempty"`
}

func (x *ThreadMetadata) Reset() {
	*x = ThreadMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_discordgo_channel_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadMetadata) ProtoMessage() {}

func (x *ThreadMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_discordgo_channel_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadMetadata.ProtoReflect.Descriptor instead.
func (*ThreadMetadata) Descriptor() ([]byte, []int) {
	return file_proto_discordgo_channel_proto_rawDescGZIP(), []int{3}
}

func (x *ThreadMetadata) GetArchived() bool {
	if x != nil {
		return x.Archived
	}
	return false
}

func (x *ThreadMetadata) GetAutoArchiveDuration() int32 {
	if x != nil {
		return x.AutoArchiveDuration
	}
	return 0
}

func (x *ThreadMetadata) GetArchiveTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchiveTimestamp
	}
	return nil
}

func (x *ThreadMetadata) GetLocked() bool {
	if x != nil {
		return x.Locked
	}
	return false
}

func (x *ThreadMetadata) GetInvitable() bool {
	if x != nil {
		return x.Invitable
	}
	return false
}

type ThreadMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	JoinTimestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=join_timestamp,json=joinTimestamp,proto3" json:"join_timestamp,omitempty"`
	Flags         int32                  `protobuf:"varint,4,opt,name=flags,proto3" json:"flags,omitempty"`
}

func (x *ThreadMember) Reset() {
	*x = ThreadMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_discordgo_channel_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadMember) ProtoMessage() {}

func (x *ThreadMember) ProtoReflect() protoreflect.Message {
	mi := &file_proto_discordgo_channel_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadMember.ProtoReflect.Descriptor instead.
func (*ThreadMember) Descriptor() ([]byte, []int) {
	return file_proto_discordgo_channel_proto_rawDescGZIP(), []int{4}
}

func (x *ThreadMember) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ThreadMember) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ThreadMember) GetJoinTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.JoinTimestamp
	}
	return nil
}

func (x *ThreadMember) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

type ForumTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Moderated bool   `protobuf:"varint,3,opt,name=moderated,proto3" json:"moderated,omitempty"`
	EmojiId   string `protobuf:"bytes,4,opt,name=emoji_id,json=emojiId,proto3" json:"emoji_id,omitempty"`
	EmojiName string `protobuf:"bytes,5,opt,name=emoji_name,json=emojiName,proto3" json:"emoji_name,omitempty"`
}

func (x *ForumTag) Reset() {
	*x = ForumTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_discordgo_channel_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForumTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForumTag) ProtoMessage() {}

func (x *ForumTag) ProtoReflect() protoreflect.Message {
	mi := &file_proto_discordgo_channel_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForumTag.ProtoReflect.Descriptor instead.
func (*ForumTag) Descriptor() ([]byte, []int) {
	return file_proto_discordgo_channel_proto_rawDescGZIP(), []int{5}
}

func (x *ForumTag) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ForumTag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ForumTag) GetModerated() bool {
	if x != nil {
		return x.Moderated
	}
	return false
}

func (x *ForumTag) GetEmojiId() string {
	if x != nil {
		return x.EmojiId
	}
	return ""
}

func (x *ForumTag) GetEmojiName() string {
	if x != nil {
		return x.EmojiName
	}
	return ""
}

type ForumDefaultReaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmojiId   string `protobuf:"bytes,1,opt,name=emoji_id,json=emojiId,proto3" json:"emoji_id,omitempty"`
	EmojiName string `protobuf:"bytes,2,opt,name=emoji_name,json=emojiName,proto3" json:"emoji_name,omitempty"`
}

func (x *ForumDefaultReaction) Reset() {
	*x = ForumDefaultReaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_discordgo_channel_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForumDefaultReaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForumDefaultReaction) ProtoMessage() {}

func (x *ForumDefaultReaction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_discordgo_channel_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForumDefaultReaction.ProtoReflect.Descriptor instead.
func (*ForumDefaultReaction) Descriptor() ([]byte, []int) {
	return file_proto_discordgo_channel_proto_rawDescGZIP(), []int{6}
}

func (x *ForumDefaultReaction) GetEmojiId() string {
	if x != nil {
		return x.EmojiId
	}
	return ""
}

func (x *ForumDefaultReaction) GetEmojiName() string {
	if x != nil {
		return x.EmojiName
	}
	return ""
}

var File_proto_discordgo_channel_proto protoreflect.FileDescriptor

var file_proto_discordgo_channel_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x67,
	0x6f, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x09, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x67, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x67, 0x6f, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x67, 0x6f, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x67, 0x6f, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa8, 0x0a, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x69, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x6c, 0x61,
	0x73, 0x74, 0x50, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x23,
	0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x73, 0x66, 0x77, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6e, 0x73, 0x66, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63,
	0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x69,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x69, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x72, 0x64, 0x67, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72,
	0x64, 0x67, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x15, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x73, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x67, 0x6f,
	0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x52, 0x14, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0f, 0x74, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x67, 0x6f, 0x2e, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x06, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x72, 0x64, 0x67, 0x6f, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x07,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x67, 0x6f, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x3a, 0x0a, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x67, 0x6f, 0x2e, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x54,
	0x61, 0x67, 0x52, 0x0d, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x61, 0x67,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x54, 0x61, 0x67, 0x73, 0x12, 0x55, 0x0a, 0x16, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x67, 0x6f,
	0x2e, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x12, 0x49, 0x0a, 0x22, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x6f, 0x72,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x46, 0x6f, 0x72, 0x75, 0x6d, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x22, 0x86, 0x0a, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x45, 0x0a, 0x10,
	0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0f, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x6f, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x74, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x72, 0x79, 0x6f, 0x6e, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65,
	0x72, 0x79, 0x6f, 0x6e, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x67,
	0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x3e,
	0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x67, 0x6f, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3b,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x67, 0x6f, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52,
	0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x65,
	0x6d, 0x62, 0x65, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x72, 0x64, 0x67, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x52, 0x06, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x73, 0x12, 0x2b, 0x0a, 0x08,
	0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x67, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x08, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x09, 0x72, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x67, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x09, 0x72, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x12,
	0x29, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x67, 0x6f, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x10, 0x6d, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x14,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x67, 0x6f,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x0f, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x72, 0x64, 0x67, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x12, 0x3f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64,
	0x67, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x67, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x12,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x72, 0x64, 0x67, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x11, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x3f, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x67, 0x6f,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x2a, 0x0a, 0x06, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64,
	0x67, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x06, 0x74, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x12, 0x37, 0x0a, 0x0d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x72, 0x64, 0x67, 0x6f, 0x2e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x0c, 0x73,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x63, 0x0a, 0x13, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x65, 0x6e, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x65, 0x6e, 0x79,
	0x22, 0xdf, 0x01, 0x0a, 0x0e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x12,
	0x32, 0x0a, 0x15, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13,
	0x61, 0x75, 0x74, 0x6f, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x11, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x0c, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0e,
	0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0d, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x08, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x54,
	0x61, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x50,
	0x0a, 0x14, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x4e, 0x61, 0x6d, 0x65,
	0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x45,
	0x6c, 0x69, 0x61, 0x73, 0x53, 0x74, 0x61, 0x72, 0x2f, 0x42, 0x61, 0x63, 0x6f, 0x54, 0x65, 0x6c,
	0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x67, 0x6f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_discordgo_channel_proto_rawDescOnce sync.Once
	file_proto_discordgo_channel_proto_rawDescData = file_proto_discordgo_channel_proto_rawDesc
)

func file_proto_discordgo_channel_proto_rawDescGZIP() []byte {
	file_proto_discordgo_channel_proto_rawDescOnce.Do(func() {
		file_proto_discordgo_channel_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_discordgo_channel_proto_rawDescData)
	})
	return file_proto_discordgo_channel_proto_rawDescData
}

var file_proto_discordgo_channel_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_proto_discordgo_channel_proto_goTypes = []interface{}{
	(*Channel)(nil),               // 0: discordgo.Channel
	(*Message)(nil),               // 1: discordgo.Message
	(*PermissionOverwrite)(nil),   // 2: discordgo.PermissionOverwrite
	(*ThreadMetadata)(nil),        // 3: discordgo.ThreadMetadata
	(*ThreadMember)(nil),          // 4: discordgo.ThreadMember
	(*ForumTag)(nil),              // 5: discordgo.ForumTag
	(*ForumDefaultReaction)(nil),  // 6: discordgo.ForumDefaultReaction
	(*timestamppb.Timestamp)(nil), // 7: google.protobuf.Timestamp
	(*User)(nil),                  // 8: discordgo.User
	(*MessageAttachment)(nil),     // 9: discordgo.MessageAttachment
	(*MessageComponent)(nil),      // 10: discordgo.MessageComponent
	(*MessageEmbed)(nil),          // 11: discordgo.MessageEmbed
	(*MessageReactions)(nil),      // 12: discordgo.MessageReactions
	(*Member)(nil),                // 13: discordgo.Member
	(*MessageActivity)(nil),       // 14: discordgo.MessageActivity
	(*MessageApplication)(nil),    // 15: discordgo.MessageApplication
	(*MessageReference)(nil),      // 16: discordgo.MessageReference
	(*MessageInteraction)(nil),    // 17: discordgo.MessageInteraction
	(*Sticker)(nil),               // 18: discordgo.Sticker
}
var file_proto_discordgo_channel_proto_depIdxs = []int32{
	7,  // 0: discordgo.Channel.last_pin_timestamp:type_name -> google.protobuf.Timestamp
	8,  // 1: discordgo.Channel.recipients:type_name -> discordgo.User
	1,  // 2: discordgo.Channel.messages:type_name -> discordgo.Message
	2,  // 3: discordgo.Channel.permission_overwrites:type_name -> discordgo.PermissionOverwrite
	3,  // 4: discordgo.Channel.thread_metadata:type_name -> discordgo.ThreadMetadata
	4,  // 5: discordgo.Channel.member:type_name -> discordgo.ThreadMember
	4,  // 6: discordgo.Channel.members:type_name -> discordgo.ThreadMember
	5,  // 7: discordgo.Channel.available_tags:type_name -> discordgo.ForumTag
	6,  // 8: discordgo.Channel.default_reaction_emoji:type_name -> discordgo.ForumDefaultReaction
	7,  // 9: discordgo.Message.timestamp:type_name -> google.protobuf.Timestamp
	7,  // 10: discordgo.Message.edited_timestamp:type_name -> google.protobuf.Timestamp
	8,  // 11: discordgo.Message.author:type_name -> discordgo.User
	9,  // 12: discordgo.Message.attachments:type_name -> discordgo.MessageAttachment
	10, // 13: discordgo.Message.components:type_name -> discordgo.MessageComponent
	11, // 14: discordgo.Message.embeds:type_name -> discordgo.MessageEmbed
	8,  // 15: discordgo.Message.mentions:type_name -> discordgo.User
	12, // 16: discordgo.Message.reactions:type_name -> discordgo.MessageReactions
	13, // 17: discordgo.Message.member:type_name -> discordgo.Member
	0,  // 18: discordgo.Message.mention_channels:type_name -> discordgo.Channel
	14, // 19: discordgo.Message.activity:type_name -> discordgo.MessageActivity
	15, // 20: discordgo.Message.application:type_name -> discordgo.MessageApplication
	16, // 21: discordgo.Message.message_reference:type_name -> discordgo.MessageReference
	1,  // 22: discordgo.Message.referenced_message:type_name -> discordgo.Message
	17, // 23: discordgo.Message.interaction:type_name -> discordgo.MessageInteraction
	0,  // 24: discordgo.Message.thread:type_name -> discordgo.Channel
	18, // 25: discordgo.Message.sticker_items:type_name -> discordgo.Sticker
	7,  // 26: discordgo.ThreadMetadata.archive_timestamp:type_name -> google.protobuf.Timestamp
	7,  // 27: discordgo.ThreadMember.join_timestamp:type_name -> google.protobuf.Timestamp
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_proto_discordgo_channel_proto_init() }
func file_proto_discordgo_channel_proto_init() {
	if File_proto_discordgo_channel_proto != nil {
		return
	}
	file_proto_discordgo_component_proto_init()
	file_proto_discordgo_message_proto_init()
	file_proto_discordgo_user_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_discordgo_channel_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Channel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_discordgo_channel_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_discordgo_channel_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionOverwrite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_discordgo_channel_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_discordgo_channel_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_discordgo_channel_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForumTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_discordgo_channel_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForumDefaultReaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_discordgo_channel_proto_msgTypes[0].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_discordgo_channel_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_discordgo_channel_proto_goTypes,
		DependencyIndexes: file_proto_discordgo_channel_proto_depIdxs,
		MessageInfos:      file_proto_discordgo_channel_proto_msgTypes,
	}.Build()
	File_proto_discordgo_channel_proto = out.File
	file_proto_discordgo_channel_proto_rawDesc = nil
	file_proto_discordgo_channel_proto_goTypes = nil
	file_proto_discordgo_channel_proto_depIdxs = nil
}
