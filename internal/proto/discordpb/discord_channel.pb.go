// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.23.0
// source: proto/discord_channel.proto

package discordpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Username      string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Discriminator string `protobuf:"bytes,3,opt,name=discriminator,proto3" json:"discriminator,omitempty"`
	Email         string `protobuf:"bytes,12,opt,name=email,proto3" json:"email,omitempty"`
	Avatar        string `protobuf:"bytes,4,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Banner        string `protobuf:"bytes,8,opt,name=banner,proto3" json:"banner,omitempty"`
	AccentColor   uint32 `protobuf:"varint,9,opt,name=accent_color,json=accentColor,proto3" json:"accent_color,omitempty"`
	Locale        string `protobuf:"bytes,10,opt,name=locale,proto3" json:"locale,omitempty"`
	Bot           bool   `protobuf:"varint,5,opt,name=bot,proto3" json:"bot,omitempty"`
	System        bool   `protobuf:"varint,6,opt,name=system,proto3" json:"system,omitempty"`
	MfaEnabled    bool   `protobuf:"varint,7,opt,name=mfa_enabled,json=mfaEnabled,proto3" json:"mfa_enabled,omitempty"`
	Verified      bool   `protobuf:"varint,11,opt,name=verified,proto3" json:"verified,omitempty"`
	PremiumType   uint32 `protobuf:"varint,14,opt,name=premium_type,json=premiumType,proto3" json:"premium_type,omitempty"`
	Flags         uint64 `protobuf:"varint,13,opt,name=flags,proto3" json:"flags,omitempty"`
	PublicFlags   uint64 `protobuf:"varint,15,opt,name=public_flags,json=publicFlags,proto3" json:"public_flags,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_discord_channel_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_proto_discord_channel_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_proto_discord_channel_proto_rawDescGZIP(), []int{0}
}

func (x *User) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *User) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *User) GetDiscriminator() string {
	if x != nil {
		return x.Discriminator
	}
	return ""
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *User) GetBanner() string {
	if x != nil {
		return x.Banner
	}
	return ""
}

func (x *User) GetAccentColor() uint32 {
	if x != nil {
		return x.AccentColor
	}
	return 0
}

func (x *User) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *User) GetBot() bool {
	if x != nil {
		return x.Bot
	}
	return false
}

func (x *User) GetSystem() bool {
	if x != nil {
		return x.System
	}
	return false
}

func (x *User) GetMfaEnabled() bool {
	if x != nil {
		return x.MfaEnabled
	}
	return false
}

func (x *User) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *User) GetPremiumType() uint32 {
	if x != nil {
		return x.PremiumType
	}
	return 0
}

func (x *User) GetFlags() uint64 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *User) GetPublicFlags() uint64 {
	if x != nil {
		return x.PublicFlags
	}
	return 0
}

type Role struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Color        uint32    `protobuf:"varint,3,opt,name=color,proto3" json:"color,omitempty"`
	UnicodeEmoji string    `protobuf:"bytes,6,opt,name=unicode_emoji,json=unicodeEmoji,proto3" json:"unicode_emoji,omitempty"`
	Icon         string    `protobuf:"bytes,5,opt,name=icon,proto3" json:"icon,omitempty"`
	Managed      bool      `protobuf:"varint,9,opt,name=managed,proto3" json:"managed,omitempty"`
	Mentionable  bool      `protobuf:"varint,10,opt,name=mentionable,proto3" json:"mentionable,omitempty"`
	Hoist        bool      `protobuf:"varint,4,opt,name=hoist,proto3" json:"hoist,omitempty"`
	Position     uint32    `protobuf:"varint,7,opt,name=position,proto3" json:"position,omitempty"`
	Permissions  int64     `protobuf:"varint,8,opt,name=permissions,proto3" json:"permissions,omitempty"`
	Tags         *RoleTags `protobuf:"bytes,11,opt,name=tags,proto3" json:"tags,omitempty"`
}

func (x *Role) Reset() {
	*x = Role{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_discord_channel_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Role) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Role) ProtoMessage() {}

func (x *Role) ProtoReflect() protoreflect.Message {
	mi := &file_proto_discord_channel_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Role.ProtoReflect.Descriptor instead.
func (*Role) Descriptor() ([]byte, []int) {
	return file_proto_discord_channel_proto_rawDescGZIP(), []int{1}
}

func (x *Role) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Role) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Role) GetColor() uint32 {
	if x != nil {
		return x.Color
	}
	return 0
}

func (x *Role) GetUnicodeEmoji() string {
	if x != nil {
		return x.UnicodeEmoji
	}
	return ""
}

func (x *Role) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *Role) GetManaged() bool {
	if x != nil {
		return x.Managed
	}
	return false
}

func (x *Role) GetMentionable() bool {
	if x != nil {
		return x.Mentionable
	}
	return false
}

func (x *Role) GetHoist() bool {
	if x != nil {
		return x.Hoist
	}
	return false
}

func (x *Role) GetPosition() uint32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *Role) GetPermissions() int64 {
	if x != nil {
		return x.Permissions
	}
	return 0
}

func (x *Role) GetTags() *RoleTags {
	if x != nil {
		return x.Tags
	}
	return nil
}

type RoleTags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BotId                 string `protobuf:"bytes,1,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	IntegrationId         string `protobuf:"bytes,2,opt,name=integration_id,json=integrationId,proto3" json:"integration_id,omitempty"`
	SubscriptionListingId string `protobuf:"bytes,4,opt,name=subscription_listing_id,json=subscriptionListingId,proto3" json:"subscription_listing_id,omitempty"`
	PremiumSubscriber     bool   `protobuf:"varint,3,opt,name=premium_subscriber,json=premiumSubscriber,proto3" json:"premium_subscriber,omitempty"`
	AvailableForPurchase  bool   `protobuf:"varint,5,opt,name=available_for_purchase,json=availableForPurchase,proto3" json:"available_for_purchase,omitempty"`
	GuildConnections      bool   `protobuf:"varint,6,opt,name=guild_connections,json=guildConnections,proto3" json:"guild_connections,omitempty"`
}

func (x *RoleTags) Reset() {
	*x = RoleTags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_discord_channel_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleTags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleTags) ProtoMessage() {}

func (x *RoleTags) ProtoReflect() protoreflect.Message {
	mi := &file_proto_discord_channel_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleTags.ProtoReflect.Descriptor instead.
func (*RoleTags) Descriptor() ([]byte, []int) {
	return file_proto_discord_channel_proto_rawDescGZIP(), []int{2}
}

func (x *RoleTags) GetBotId() string {
	if x != nil {
		return x.BotId
	}
	return ""
}

func (x *RoleTags) GetIntegrationId() string {
	if x != nil {
		return x.IntegrationId
	}
	return ""
}

func (x *RoleTags) GetSubscriptionListingId() string {
	if x != nil {
		return x.SubscriptionListingId
	}
	return ""
}

func (x *RoleTags) GetPremiumSubscriber() bool {
	if x != nil {
		return x.PremiumSubscriber
	}
	return false
}

func (x *RoleTags) GetAvailableForPurchase() bool {
	if x != nil {
		return x.AvailableForPurchase
	}
	return false
}

func (x *RoleTags) GetGuildConnections() bool {
	if x != nil {
		return x.GuildConnections
	}
	return false
}

type Channel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                            string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                          uint32           `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	GuildId                       string           `protobuf:"bytes,3,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	Position                      uint32           `protobuf:"varint,4,opt,name=position,proto3" json:"position,omitempty"`
	PermissionOverwrites          []*Overwrite     `protobuf:"bytes,5,rep,name=permission_overwrites,json=permissionOverwrites,proto3" json:"permission_overwrites,omitempty"`
	Name                          string           `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Topic                         string           `protobuf:"bytes,7,opt,name=topic,proto3" json:"topic,omitempty"`
	Nsfw                          bool             `protobuf:"varint,8,opt,name=nsfw,proto3" json:"nsfw,omitempty"`
	LastMessageId                 string           `protobuf:"bytes,9,opt,name=last_message_id,json=lastMessageId,proto3" json:"last_message_id,omitempty"`
	Bitrate                       uint32           `protobuf:"varint,10,opt,name=bitrate,proto3" json:"bitrate,omitempty"`
	UserLimit                     uint32           `protobuf:"varint,11,opt,name=user_limit,json=userLimit,proto3" json:"user_limit,omitempty"`
	RateLimitPerUser              uint32           `protobuf:"varint,12,opt,name=rate_limit_per_user,json=rateLimitPerUser,proto3" json:"rate_limit_per_user,omitempty"`
	Recipients                    []*User          `protobuf:"bytes,13,rep,name=recipients,proto3" json:"recipients,omitempty"`
	Icon                          string           `protobuf:"bytes,14,opt,name=icon,proto3" json:"icon,omitempty"`
	OwnerId                       string           `protobuf:"bytes,15,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	ApplicationId                 string           `protobuf:"bytes,16,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	Managed                       bool             `protobuf:"varint,17,opt,name=managed,proto3" json:"managed,omitempty"`
	ParentId                      string           `protobuf:"bytes,18,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	LastPinTimestamp              string           `protobuf:"bytes,19,opt,name=last_pin_timestamp,json=lastPinTimestamp,proto3" json:"last_pin_timestamp,omitempty"`
	RtcRegion                     string           `protobuf:"bytes,20,opt,name=rtc_region,json=rtcRegion,proto3" json:"rtc_region,omitempty"`
	VideoQualityMode              uint32           `protobuf:"varint,21,opt,name=video_quality_mode,json=videoQualityMode,proto3" json:"video_quality_mode,omitempty"`
	MessageCount                  uint32           `protobuf:"varint,22,opt,name=message_count,json=messageCount,proto3" json:"message_count,omitempty"`
	MemberCount                   uint32           `protobuf:"varint,23,opt,name=member_count,json=memberCount,proto3" json:"member_count,omitempty"`
	ThreadMetadata                *ThreadMetadata  `protobuf:"bytes,24,opt,name=thread_metadata,json=threadMetadata,proto3" json:"thread_metadata,omitempty"`
	Member                        *ThreadMember    `protobuf:"bytes,25,opt,name=member,proto3" json:"member,omitempty"`
	DefaultAutoArchiveDuration    uint32           `protobuf:"varint,26,opt,name=default_auto_archive_duration,json=defaultAutoArchiveDuration,proto3" json:"default_auto_archive_duration,omitempty"`
	Permissions                   string           `protobuf:"bytes,27,opt,name=permissions,proto3" json:"permissions,omitempty"`
	Flags                         uint64           `protobuf:"varint,28,opt,name=flags,proto3" json:"flags,omitempty"`
	TotalMessageSent              uint32           `protobuf:"varint,29,opt,name=total_message_sent,json=totalMessageSent,proto3" json:"total_message_sent,omitempty"`
	AvailableTags                 []*ForumTag      `protobuf:"bytes,30,rep,name=available_tags,json=availableTags,proto3" json:"available_tags,omitempty"`
	AppliedTags                   []string         `protobuf:"bytes,31,rep,name=applied_tags,json=appliedTags,proto3" json:"applied_tags,omitempty"`
	DefaultReactionEmoji          *DefaultReaction `protobuf:"bytes,32,opt,name=default_reaction_emoji,json=defaultReactionEmoji,proto3" json:"default_reaction_emoji,omitempty"`
	DefaultThreadRateLimitPerUser uint32           `protobuf:"varint,33,opt,name=default_thread_rate_limit_per_user,json=defaultThreadRateLimitPerUser,proto3" json:"default_thread_rate_limit_per_user,omitempty"`
	DefaultSortOrder              *uint32          `protobuf:"varint,34,opt,name=default_sort_order,json=defaultSortOrder,proto3,oneof" json:"default_sort_order,omitempty"`
	DefaultForumLayout            uint32           `protobuf:"varint,35,opt,name=default_forum_layout,json=defaultForumLayout,proto3" json:"default_forum_layout,omitempty"`
}

func (x *Channel) Reset() {
	*x = Channel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_discord_channel_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Channel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Channel) ProtoMessage() {}

func (x *Channel) ProtoReflect() protoreflect.Message {
	mi := &file_proto_discord_channel_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Channel.ProtoReflect.Descriptor instead.
func (*Channel) Descriptor() ([]byte, []int) {
	return file_proto_discord_channel_proto_rawDescGZIP(), []int{3}
}

func (x *Channel) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Channel) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Channel) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

func (x *Channel) GetPosition() uint32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *Channel) GetPermissionOverwrites() []*Overwrite {
	if x != nil {
		return x.PermissionOverwrites
	}
	return nil
}

func (x *Channel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Channel) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *Channel) GetNsfw() bool {
	if x != nil {
		return x.Nsfw
	}
	return false
}

func (x *Channel) GetLastMessageId() string {
	if x != nil {
		return x.LastMessageId
	}
	return ""
}

func (x *Channel) GetBitrate() uint32 {
	if x != nil {
		return x.Bitrate
	}
	return 0
}

func (x *Channel) GetUserLimit() uint32 {
	if x != nil {
		return x.UserLimit
	}
	return 0
}

func (x *Channel) GetRateLimitPerUser() uint32 {
	if x != nil {
		return x.RateLimitPerUser
	}
	return 0
}

func (x *Channel) GetRecipients() []*User {
	if x != nil {
		return x.Recipients
	}
	return nil
}

func (x *Channel) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *Channel) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *Channel) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *Channel) GetManaged() bool {
	if x != nil {
		return x.Managed
	}
	return false
}

func (x *Channel) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *Channel) GetLastPinTimestamp() string {
	if x != nil {
		return x.LastPinTimestamp
	}
	return ""
}

func (x *Channel) GetRtcRegion() string {
	if x != nil {
		return x.RtcRegion
	}
	return ""
}

func (x *Channel) GetVideoQualityMode() uint32 {
	if x != nil {
		return x.VideoQualityMode
	}
	return 0
}

func (x *Channel) GetMessageCount() uint32 {
	if x != nil {
		return x.MessageCount
	}
	return 0
}

func (x *Channel) GetMemberCount() uint32 {
	if x != nil {
		return x.MemberCount
	}
	return 0
}

func (x *Channel) GetThreadMetadata() *ThreadMetadata {
	if x != nil {
		return x.ThreadMetadata
	}
	return nil
}

func (x *Channel) GetMember() *ThreadMember {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *Channel) GetDefaultAutoArchiveDuration() uint32 {
	if x != nil {
		return x.DefaultAutoArchiveDuration
	}
	return 0
}

func (x *Channel) GetPermissions() string {
	if x != nil {
		return x.Permissions
	}
	return ""
}

func (x *Channel) GetFlags() uint64 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *Channel) GetTotalMessageSent() uint32 {
	if x != nil {
		return x.TotalMessageSent
	}
	return 0
}

func (x *Channel) GetAvailableTags() []*ForumTag {
	if x != nil {
		return x.AvailableTags
	}
	return nil
}

func (x *Channel) GetAppliedTags() []string {
	if x != nil {
		return x.AppliedTags
	}
	return nil
}

func (x *Channel) GetDefaultReactionEmoji() *DefaultReaction {
	if x != nil {
		return x.DefaultReactionEmoji
	}
	return nil
}

func (x *Channel) GetDefaultThreadRateLimitPerUser() uint32 {
	if x != nil {
		return x.DefaultThreadRateLimitPerUser
	}
	return 0
}

func (x *Channel) GetDefaultSortOrder() uint32 {
	if x != nil && x.DefaultSortOrder != nil {
		return *x.DefaultSortOrder
	}
	return 0
}

func (x *Channel) GetDefaultForumLayout() uint32 {
	if x != nil {
		return x.DefaultForumLayout
	}
	return 0
}

type Overwrite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type  uint32 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Allow string `protobuf:"bytes,3,opt,name=allow,proto3" json:"allow,omitempty"`
	Deny  string `protobuf:"bytes,4,opt,name=deny,proto3" json:"deny,omitempty"`
}

func (x *Overwrite) Reset() {
	*x = Overwrite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_discord_channel_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Overwrite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Overwrite) ProtoMessage() {}

func (x *Overwrite) ProtoReflect() protoreflect.Message {
	mi := &file_proto_discord_channel_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Overwrite.ProtoReflect.Descriptor instead.
func (*Overwrite) Descriptor() ([]byte, []int) {
	return file_proto_discord_channel_proto_rawDescGZIP(), []int{4}
}

func (x *Overwrite) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Overwrite) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Overwrite) GetAllow() string {
	if x != nil {
		return x.Allow
	}
	return ""
}

func (x *Overwrite) GetDeny() string {
	if x != nil {
		return x.Deny
	}
	return ""
}

type ThreadMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateTimestamp     string `protobuf:"bytes,6,opt,name=create_timestamp,json=createTimestamp,proto3" json:"create_timestamp,omitempty"`
	Invitable           bool   `protobuf:"varint,5,opt,name=invitable,proto3" json:"invitable,omitempty"`
	Locked              bool   `protobuf:"varint,4,opt,name=locked,proto3" json:"locked,omitempty"`
	Archived            bool   `protobuf:"varint,1,opt,name=archived,proto3" json:"archived,omitempty"`
	AutoArchiveDuration uint32 `protobuf:"varint,2,opt,name=auto_archive_duration,json=autoArchiveDuration,proto3" json:"auto_archive_duration,omitempty"`
	ArchiveTimestamp    string `protobuf:"bytes,3,opt,name=archive_timestamp,json=archiveTimestamp,proto3" json:"archive_timestamp,omitempty"`
}

func (x *ThreadMetadata) Reset() {
	*x = ThreadMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_discord_channel_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadMetadata) ProtoMessage() {}

func (x *ThreadMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_discord_channel_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadMetadata.ProtoReflect.Descriptor instead.
func (*ThreadMetadata) Descriptor() ([]byte, []int) {
	return file_proto_discord_channel_proto_rawDescGZIP(), []int{5}
}

func (x *ThreadMetadata) GetCreateTimestamp() string {
	if x != nil {
		return x.CreateTimestamp
	}
	return ""
}

func (x *ThreadMetadata) GetInvitable() bool {
	if x != nil {
		return x.Invitable
	}
	return false
}

func (x *ThreadMetadata) GetLocked() bool {
	if x != nil {
		return x.Locked
	}
	return false
}

func (x *ThreadMetadata) GetArchived() bool {
	if x != nil {
		return x.Archived
	}
	return false
}

func (x *ThreadMetadata) GetAutoArchiveDuration() uint32 {
	if x != nil {
		return x.AutoArchiveDuration
	}
	return 0
}

func (x *ThreadMetadata) GetArchiveTimestamp() string {
	if x != nil {
		return x.ArchiveTimestamp
	}
	return ""
}

type ThreadMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId        string       `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	JoinTimestamp string       `protobuf:"bytes,3,opt,name=join_timestamp,json=joinTimestamp,proto3" json:"join_timestamp,omitempty"`
	Flags         uint64       `protobuf:"varint,4,opt,name=flags,proto3" json:"flags,omitempty"`
	Member        *GuildMember `protobuf:"bytes,5,opt,name=member,proto3" json:"member,omitempty"`
}

func (x *ThreadMember) Reset() {
	*x = ThreadMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_discord_channel_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadMember) ProtoMessage() {}

func (x *ThreadMember) ProtoReflect() protoreflect.Message {
	mi := &file_proto_discord_channel_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadMember.ProtoReflect.Descriptor instead.
func (*ThreadMember) Descriptor() ([]byte, []int) {
	return file_proto_discord_channel_proto_rawDescGZIP(), []int{6}
}

func (x *ThreadMember) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ThreadMember) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ThreadMember) GetJoinTimestamp() string {
	if x != nil {
		return x.JoinTimestamp
	}
	return ""
}

func (x *ThreadMember) GetFlags() uint64 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *ThreadMember) GetMember() *GuildMember {
	if x != nil {
		return x.Member
	}
	return nil
}

type GuildMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User                       *User    `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Nick                       string   `protobuf:"bytes,2,opt,name=nick,proto3" json:"nick,omitempty"`
	Avatar                     string   `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`
	JoinedAt                   string   `protobuf:"bytes,5,opt,name=joined_at,json=joinedAt,proto3" json:"joined_at,omitempty"`
	PremiumSince               string   `protobuf:"bytes,6,opt,name=premium_since,json=premiumSince,proto3" json:"premium_since,omitempty"`
	Deaf                       bool     `protobuf:"varint,7,opt,name=deaf,proto3" json:"deaf,omitempty"`
	Mute                       bool     `protobuf:"varint,8,opt,name=mute,proto3" json:"mute,omitempty"`
	Pending                    bool     `protobuf:"varint,10,opt,name=pending,proto3" json:"pending,omitempty"`
	Flags                      uint64   `protobuf:"varint,9,opt,name=flags,proto3" json:"flags,omitempty"`
	Roles                      []string `protobuf:"bytes,4,rep,name=roles,proto3" json:"roles,omitempty"`
	Permissions                string   `protobuf:"bytes,11,opt,name=permissions,proto3" json:"permissions,omitempty"`
	CommunicationDisabledUntil string   `protobuf:"bytes,12,opt,name=communication_disabled_until,json=communicationDisabledUntil,proto3" json:"communication_disabled_until,omitempty"`
}

func (x *GuildMember) Reset() {
	*x = GuildMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_discord_channel_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildMember) ProtoMessage() {}

func (x *GuildMember) ProtoReflect() protoreflect.Message {
	mi := &file_proto_discord_channel_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildMember.ProtoReflect.Descriptor instead.
func (*GuildMember) Descriptor() ([]byte, []int) {
	return file_proto_discord_channel_proto_rawDescGZIP(), []int{7}
}

func (x *GuildMember) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *GuildMember) GetNick() string {
	if x != nil {
		return x.Nick
	}
	return ""
}

func (x *GuildMember) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *GuildMember) GetJoinedAt() string {
	if x != nil {
		return x.JoinedAt
	}
	return ""
}

func (x *GuildMember) GetPremiumSince() string {
	if x != nil {
		return x.PremiumSince
	}
	return ""
}

func (x *GuildMember) GetDeaf() bool {
	if x != nil {
		return x.Deaf
	}
	return false
}

func (x *GuildMember) GetMute() bool {
	if x != nil {
		return x.Mute
	}
	return false
}

func (x *GuildMember) GetPending() bool {
	if x != nil {
		return x.Pending
	}
	return false
}

func (x *GuildMember) GetFlags() uint64 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *GuildMember) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *GuildMember) GetPermissions() string {
	if x != nil {
		return x.Permissions
	}
	return ""
}

func (x *GuildMember) GetCommunicationDisabledUntil() string {
	if x != nil {
		return x.CommunicationDisabledUntil
	}
	return ""
}

type ForumTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	EmojiId   string `protobuf:"bytes,4,opt,name=emoji_id,json=emojiId,proto3" json:"emoji_id,omitempty"`
	EmojiName string `protobuf:"bytes,5,opt,name=emoji_name,json=emojiName,proto3" json:"emoji_name,omitempty"`
	Moderated bool   `protobuf:"varint,3,opt,name=moderated,proto3" json:"moderated,omitempty"`
}

func (x *ForumTag) Reset() {
	*x = ForumTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_discord_channel_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForumTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForumTag) ProtoMessage() {}

func (x *ForumTag) ProtoReflect() protoreflect.Message {
	mi := &file_proto_discord_channel_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForumTag.ProtoReflect.Descriptor instead.
func (*ForumTag) Descriptor() ([]byte, []int) {
	return file_proto_discord_channel_proto_rawDescGZIP(), []int{8}
}

func (x *ForumTag) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ForumTag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ForumTag) GetEmojiId() string {
	if x != nil {
		return x.EmojiId
	}
	return ""
}

func (x *ForumTag) GetEmojiName() string {
	if x != nil {
		return x.EmojiName
	}
	return ""
}

func (x *ForumTag) GetModerated() bool {
	if x != nil {
		return x.Moderated
	}
	return false
}

type DefaultReaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmojiId   string `protobuf:"bytes,1,opt,name=emoji_id,json=emojiId,proto3" json:"emoji_id,omitempty"`
	EmojiName string `protobuf:"bytes,2,opt,name=emoji_name,json=emojiName,proto3" json:"emoji_name,omitempty"`
}

func (x *DefaultReaction) Reset() {
	*x = DefaultReaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_discord_channel_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefaultReaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultReaction) ProtoMessage() {}

func (x *DefaultReaction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_discord_channel_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultReaction.ProtoReflect.Descriptor instead.
func (*DefaultReaction) Descriptor() ([]byte, []int) {
	return file_proto_discord_channel_proto_rawDescGZIP(), []int{9}
}

func (x *DefaultReaction) GetEmojiId() string {
	if x != nil {
		return x.EmojiId
	}
	return ""
}

func (x *DefaultReaction) GetEmojiName() string {
	if x != nil {
		return x.EmojiName
	}
	return ""
}

var File_proto_discord_channel_proto protoreflect.FileDescriptor

var file_proto_discord_channel_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x9c, 0x03, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x64,
	0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61,
	0x63, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x03, 0x62, 0x6f, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x66, 0x61, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x6d, 0x66, 0x61, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x65,
	0x6d, 0x69, 0x75, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x22, 0xb0, 0x02, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x6e, 0x69, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x75, 0x6e, 0x69, 0x63, 0x6f, 0x64, 0x65, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6d,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x68, 0x6f, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x68, 0x6f,
	0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x61,
	0x67, 0x73, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x92, 0x02, 0x0a, 0x08, 0x52, 0x6f, 0x6c,
	0x65, 0x54, 0x61, 0x67, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x70,
	0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x70, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x12, 0x2b, 0x0a, 0x11, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x88, 0x0b,
	0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x15, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x4f, 0x76,
	0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x52, 0x14, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x73, 0x66, 0x77, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6e, 0x73, 0x66, 0x77, 0x12, 0x26, 0x0a, 0x0f, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2d, 0x0a, 0x13,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x72, 0x61, 0x74, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x50, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x0a, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0a,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63,
	0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x70, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x74, 0x63, 0x5f, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x74, 0x63, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0f, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x0a, 0x06,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x1d, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x1a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x53, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x54, 0x61, 0x67, 0x52,
	0x0d, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x1f,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x54, 0x61, 0x67,
	0x73, 0x12, 0x4e, 0x0a, 0x16, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6d, 0x6f, 0x6a,
	0x69, 0x12, 0x49, 0x0a, 0x22, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x12,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x10, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x30, 0x0a, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x75, 0x6d,
	0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x4c, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x6f,
	0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x59, 0x0a, 0x09, 0x4f, 0x76, 0x65, 0x72,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x65, 0x6e, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x65, 0x6e, 0x79, 0x22, 0xee, 0x01, 0x0a, 0x0e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x13, 0x61, 0x75, 0x74, 0x6f, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x22, 0xa2, 0x01, 0x0a, 0x0c, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xf0, 0x02, 0x0a, 0x0b, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x69, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x69, 0x63, 0x6b,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x69,
	0x6e, 0x65, 0x64, 0x41, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d,
	0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72,
	0x65, 0x6d, 0x69, 0x75, 0x6d, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65,
	0x61, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x65, 0x61, 0x66, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x75, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6d, 0x75,
	0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x40, 0x0a, 0x1c, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1a, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x22, 0x86, 0x01, 0x0a,
	0x08, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x54, 0x61, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6d, 0x6f, 0x6a,
	0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6d,
	0x6f, 0x6a, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x22, 0x4b, 0x0a, 0x0f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6d, 0x6f, 0x6a,
	0x69, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6d, 0x6f, 0x6a,
	0x69, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x4e, 0x61,
	0x6d, 0x65, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x45, 0x6c, 0x69, 0x61, 0x73, 0x53, 0x74, 0x61, 0x72, 0x2f, 0x42, 0x61, 0x63, 0x6f, 0x54,
	0x65, 0x6c, 0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_discord_channel_proto_rawDescOnce sync.Once
	file_proto_discord_channel_proto_rawDescData = file_proto_discord_channel_proto_rawDesc
)

func file_proto_discord_channel_proto_rawDescGZIP() []byte {
	file_proto_discord_channel_proto_rawDescOnce.Do(func() {
		file_proto_discord_channel_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_discord_channel_proto_rawDescData)
	})
	return file_proto_discord_channel_proto_rawDescData
}

var file_proto_discord_channel_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_proto_discord_channel_proto_goTypes = []interface{}{
	(*User)(nil),            // 0: discord.User
	(*Role)(nil),            // 1: discord.Role
	(*RoleTags)(nil),        // 2: discord.RoleTags
	(*Channel)(nil),         // 3: discord.Channel
	(*Overwrite)(nil),       // 4: discord.Overwrite
	(*ThreadMetadata)(nil),  // 5: discord.ThreadMetadata
	(*ThreadMember)(nil),    // 6: discord.ThreadMember
	(*GuildMember)(nil),     // 7: discord.GuildMember
	(*ForumTag)(nil),        // 8: discord.ForumTag
	(*DefaultReaction)(nil), // 9: discord.DefaultReaction
}
var file_proto_discord_channel_proto_depIdxs = []int32{
	2, // 0: discord.Role.tags:type_name -> discord.RoleTags
	4, // 1: discord.Channel.permission_overwrites:type_name -> discord.Overwrite
	0, // 2: discord.Channel.recipients:type_name -> discord.User
	5, // 3: discord.Channel.thread_metadata:type_name -> discord.ThreadMetadata
	6, // 4: discord.Channel.member:type_name -> discord.ThreadMember
	8, // 5: discord.Channel.available_tags:type_name -> discord.ForumTag
	9, // 6: discord.Channel.default_reaction_emoji:type_name -> discord.DefaultReaction
	7, // 7: discord.ThreadMember.member:type_name -> discord.GuildMember
	0, // 8: discord.GuildMember.user:type_name -> discord.User
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_proto_discord_channel_proto_init() }
func file_proto_discord_channel_proto_init() {
	if File_proto_discord_channel_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_discord_channel_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_discord_channel_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Role); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_discord_channel_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleTags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_discord_channel_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Channel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_discord_channel_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Overwrite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_discord_channel_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_discord_channel_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_discord_channel_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_discord_channel_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForumTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_discord_channel_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefaultReaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_discord_channel_proto_msgTypes[3].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_discord_channel_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_discord_channel_proto_goTypes,
		DependencyIndexes: file_proto_discord_channel_proto_depIdxs,
		MessageInfos:      file_proto_discord_channel_proto_msgTypes,
	}.Build()
	File_proto_discord_channel_proto = out.File
	file_proto_discord_channel_proto_rawDesc = nil
	file_proto_discord_channel_proto_goTypes = nil
	file_proto_discord_channel_proto_depIdxs = nil
}
