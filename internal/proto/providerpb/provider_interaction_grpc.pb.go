// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.0
// source: proto/provider_interaction.proto

package providerpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	InteractionProvider_Prefix_FullMethodName              = "/provider.InteractionProvider/Prefix"
	InteractionProvider_ApplicationCommands_FullMethodName = "/provider.InteractionProvider/ApplicationCommands"
	InteractionProvider_MessageComponents_FullMethodName   = "/provider.InteractionProvider/MessageComponents"
)

// InteractionProviderClient is the client API for InteractionProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InteractionProviderClient interface {
	Prefix(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetPrefixResponse, error)
	ApplicationCommands(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetApplicationCommandsResponse, error)
	MessageComponents(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetMessageComponentsResponse, error)
}

type interactionProviderClient struct {
	cc grpc.ClientConnInterface
}

func NewInteractionProviderClient(cc grpc.ClientConnInterface) InteractionProviderClient {
	return &interactionProviderClient{cc}
}

func (c *interactionProviderClient) Prefix(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetPrefixResponse, error) {
	out := new(GetPrefixResponse)
	err := c.cc.Invoke(ctx, InteractionProvider_Prefix_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionProviderClient) ApplicationCommands(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetApplicationCommandsResponse, error) {
	out := new(GetApplicationCommandsResponse)
	err := c.cc.Invoke(ctx, InteractionProvider_ApplicationCommands_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionProviderClient) MessageComponents(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetMessageComponentsResponse, error) {
	out := new(GetMessageComponentsResponse)
	err := c.cc.Invoke(ctx, InteractionProvider_MessageComponents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InteractionProviderServer is the server API for InteractionProvider service.
// All implementations must embed UnimplementedInteractionProviderServer
// for forward compatibility
type InteractionProviderServer interface {
	Prefix(context.Context, *emptypb.Empty) (*GetPrefixResponse, error)
	ApplicationCommands(context.Context, *emptypb.Empty) (*GetApplicationCommandsResponse, error)
	MessageComponents(context.Context, *emptypb.Empty) (*GetMessageComponentsResponse, error)
	mustEmbedUnimplementedInteractionProviderServer()
}

// UnimplementedInteractionProviderServer must be embedded to have forward compatible implementations.
type UnimplementedInteractionProviderServer struct {
}

func (UnimplementedInteractionProviderServer) Prefix(context.Context, *emptypb.Empty) (*GetPrefixResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prefix not implemented")
}
func (UnimplementedInteractionProviderServer) ApplicationCommands(context.Context, *emptypb.Empty) (*GetApplicationCommandsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplicationCommands not implemented")
}
func (UnimplementedInteractionProviderServer) MessageComponents(context.Context, *emptypb.Empty) (*GetMessageComponentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageComponents not implemented")
}
func (UnimplementedInteractionProviderServer) mustEmbedUnimplementedInteractionProviderServer() {}

// UnsafeInteractionProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InteractionProviderServer will
// result in compilation errors.
type UnsafeInteractionProviderServer interface {
	mustEmbedUnimplementedInteractionProviderServer()
}

func RegisterInteractionProviderServer(s grpc.ServiceRegistrar, srv InteractionProviderServer) {
	s.RegisterService(&InteractionProvider_ServiceDesc, srv)
}

func _InteractionProvider_Prefix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionProviderServer).Prefix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionProvider_Prefix_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionProviderServer).Prefix(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionProvider_ApplicationCommands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionProviderServer).ApplicationCommands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionProvider_ApplicationCommands_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionProviderServer).ApplicationCommands(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionProvider_MessageComponents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionProviderServer).MessageComponents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionProvider_MessageComponents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionProviderServer).MessageComponents(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// InteractionProvider_ServiceDesc is the grpc.ServiceDesc for InteractionProvider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InteractionProvider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "provider.InteractionProvider",
	HandlerType: (*InteractionProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Prefix",
			Handler:    _InteractionProvider_Prefix_Handler,
		},
		{
			MethodName: "ApplicationCommands",
			Handler:    _InteractionProvider_ApplicationCommands_Handler,
		},
		{
			MethodName: "MessageComponents",
			Handler:    _InteractionProvider_MessageComponents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/provider_interaction.proto",
}

const (
	Command_CommandData_FullMethodName = "/provider.Command/CommandData"
	Command_Execute_FullMethodName     = "/provider.Command/Execute"
)

// CommandClient is the client API for Command service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommandClient interface {
	CommandData(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CommandDataResponse, error)
	Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type commandClient struct {
	cc grpc.ClientConnInterface
}

func NewCommandClient(cc grpc.ClientConnInterface) CommandClient {
	return &commandClient{cc}
}

func (c *commandClient) CommandData(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CommandDataResponse, error) {
	out := new(CommandDataResponse)
	err := c.cc.Invoke(ctx, Command_CommandData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandClient) Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Command_Execute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommandServer is the server API for Command service.
// All implementations must embed UnimplementedCommandServer
// for forward compatibility
type CommandServer interface {
	CommandData(context.Context, *emptypb.Empty) (*CommandDataResponse, error)
	Execute(context.Context, *ExecuteRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedCommandServer()
}

// UnimplementedCommandServer must be embedded to have forward compatible implementations.
type UnimplementedCommandServer struct {
}

func (UnimplementedCommandServer) CommandData(context.Context, *emptypb.Empty) (*CommandDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandData not implemented")
}
func (UnimplementedCommandServer) Execute(context.Context, *ExecuteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedCommandServer) mustEmbedUnimplementedCommandServer() {}

// UnsafeCommandServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommandServer will
// result in compilation errors.
type UnsafeCommandServer interface {
	mustEmbedUnimplementedCommandServer()
}

func RegisterCommandServer(s grpc.ServiceRegistrar, srv CommandServer) {
	s.RegisterService(&Command_ServiceDesc, srv)
}

func _Command_CommandData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandServer).CommandData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Command_CommandData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandServer).CommandData(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Command_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Command_Execute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandServer).Execute(ctx, req.(*ExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Command_ServiceDesc is the grpc.ServiceDesc for Command service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Command_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "provider.Command",
	HandlerType: (*CommandServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CommandData",
			Handler:    _Command_CommandData_Handler,
		},
		{
			MethodName: "Execute",
			Handler:    _Command_Execute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/provider_interaction.proto",
}

const (
	Component_CustomId_FullMethodName = "/provider.Component/CustomId"
	Component_Handle_FullMethodName   = "/provider.Component/Handle"
)

// ComponentClient is the client API for Component service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ComponentClient interface {
	CustomId(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CustomIdResponse, error)
	Handle(ctx context.Context, in *HandleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type componentClient struct {
	cc grpc.ClientConnInterface
}

func NewComponentClient(cc grpc.ClientConnInterface) ComponentClient {
	return &componentClient{cc}
}

func (c *componentClient) CustomId(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CustomIdResponse, error) {
	out := new(CustomIdResponse)
	err := c.cc.Invoke(ctx, Component_CustomId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *componentClient) Handle(ctx context.Context, in *HandleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Component_Handle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComponentServer is the server API for Component service.
// All implementations must embed UnimplementedComponentServer
// for forward compatibility
type ComponentServer interface {
	CustomId(context.Context, *emptypb.Empty) (*CustomIdResponse, error)
	Handle(context.Context, *HandleRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedComponentServer()
}

// UnimplementedComponentServer must be embedded to have forward compatible implementations.
type UnimplementedComponentServer struct {
}

func (UnimplementedComponentServer) CustomId(context.Context, *emptypb.Empty) (*CustomIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomId not implemented")
}
func (UnimplementedComponentServer) Handle(context.Context, *HandleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Handle not implemented")
}
func (UnimplementedComponentServer) mustEmbedUnimplementedComponentServer() {}

// UnsafeComponentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComponentServer will
// result in compilation errors.
type UnsafeComponentServer interface {
	mustEmbedUnimplementedComponentServer()
}

func RegisterComponentServer(s grpc.ServiceRegistrar, srv ComponentServer) {
	s.RegisterService(&Component_ServiceDesc, srv)
}

func _Component_CustomId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComponentServer).CustomId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Component_CustomId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComponentServer).CustomId(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Component_Handle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComponentServer).Handle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Component_Handle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComponentServer).Handle(ctx, req.(*HandleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Component_ServiceDesc is the grpc.ServiceDesc for Component service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Component_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "provider.Component",
	HandlerType: (*ComponentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CustomId",
			Handler:    _Component_CustomId_Handler,
		},
		{
			MethodName: "Handle",
			Handler:    _Component_Handle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/provider_interaction.proto",
}

const (
	InteractionProxy_Defer_FullMethodName    = "/provider.InteractionProxy/Defer"
	InteractionProxy_Respond_FullMethodName  = "/provider.InteractionProxy/Respond"
	InteractionProxy_Followup_FullMethodName = "/provider.InteractionProxy/Followup"
	InteractionProxy_Edit_FullMethodName     = "/provider.InteractionProxy/Edit"
	InteractionProxy_Delete_FullMethodName   = "/provider.InteractionProxy/Delete"
)

// InteractionProxyClient is the client API for InteractionProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InteractionProxyClient interface {
	Defer(ctx context.Context, in *DeferRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Respond(ctx context.Context, in *RespondRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Followup(ctx context.Context, in *FollowupRequest, opts ...grpc.CallOption) (*FollowupResponse, error)
	Edit(ctx context.Context, in *EditRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type interactionProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewInteractionProxyClient(cc grpc.ClientConnInterface) InteractionProxyClient {
	return &interactionProxyClient{cc}
}

func (c *interactionProxyClient) Defer(ctx context.Context, in *DeferRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, InteractionProxy_Defer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionProxyClient) Respond(ctx context.Context, in *RespondRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, InteractionProxy_Respond_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionProxyClient) Followup(ctx context.Context, in *FollowupRequest, opts ...grpc.CallOption) (*FollowupResponse, error) {
	out := new(FollowupResponse)
	err := c.cc.Invoke(ctx, InteractionProxy_Followup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionProxyClient) Edit(ctx context.Context, in *EditRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, InteractionProxy_Edit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionProxyClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, InteractionProxy_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InteractionProxyServer is the server API for InteractionProxy service.
// All implementations must embed UnimplementedInteractionProxyServer
// for forward compatibility
type InteractionProxyServer interface {
	Defer(context.Context, *DeferRequest) (*emptypb.Empty, error)
	Respond(context.Context, *RespondRequest) (*emptypb.Empty, error)
	Followup(context.Context, *FollowupRequest) (*FollowupResponse, error)
	Edit(context.Context, *EditRequest) (*emptypb.Empty, error)
	Delete(context.Context, *DeleteRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedInteractionProxyServer()
}

// UnimplementedInteractionProxyServer must be embedded to have forward compatible implementations.
type UnimplementedInteractionProxyServer struct {
}

func (UnimplementedInteractionProxyServer) Defer(context.Context, *DeferRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Defer not implemented")
}
func (UnimplementedInteractionProxyServer) Respond(context.Context, *RespondRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Respond not implemented")
}
func (UnimplementedInteractionProxyServer) Followup(context.Context, *FollowupRequest) (*FollowupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Followup not implemented")
}
func (UnimplementedInteractionProxyServer) Edit(context.Context, *EditRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Edit not implemented")
}
func (UnimplementedInteractionProxyServer) Delete(context.Context, *DeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedInteractionProxyServer) mustEmbedUnimplementedInteractionProxyServer() {}

// UnsafeInteractionProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InteractionProxyServer will
// result in compilation errors.
type UnsafeInteractionProxyServer interface {
	mustEmbedUnimplementedInteractionProxyServer()
}

func RegisterInteractionProxyServer(s grpc.ServiceRegistrar, srv InteractionProxyServer) {
	s.RegisterService(&InteractionProxy_ServiceDesc, srv)
}

func _InteractionProxy_Defer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionProxyServer).Defer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionProxy_Defer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionProxyServer).Defer(ctx, req.(*DeferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionProxy_Respond_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RespondRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionProxyServer).Respond(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionProxy_Respond_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionProxyServer).Respond(ctx, req.(*RespondRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionProxy_Followup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionProxyServer).Followup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionProxy_Followup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionProxyServer).Followup(ctx, req.(*FollowupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionProxy_Edit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionProxyServer).Edit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionProxy_Edit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionProxyServer).Edit(ctx, req.(*EditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionProxy_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionProxyServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionProxy_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionProxyServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InteractionProxy_ServiceDesc is the grpc.ServiceDesc for InteractionProxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InteractionProxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "provider.InteractionProxy",
	HandlerType: (*InteractionProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Defer",
			Handler:    _InteractionProxy_Defer_Handler,
		},
		{
			MethodName: "Respond",
			Handler:    _InteractionProxy_Respond_Handler,
		},
		{
			MethodName: "Followup",
			Handler:    _InteractionProxy_Followup_Handler,
		},
		{
			MethodName: "Edit",
			Handler:    _InteractionProxy_Edit_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _InteractionProxy_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/provider_interaction.proto",
}

const (
	ExecuteProxy_StringOption_FullMethodName     = "/provider.ExecuteProxy/StringOption"
	ExecuteProxy_IntegerOption_FullMethodName    = "/provider.ExecuteProxy/IntegerOption"
	ExecuteProxy_NumberOption_FullMethodName     = "/provider.ExecuteProxy/NumberOption"
	ExecuteProxy_BooleanOption_FullMethodName    = "/provider.ExecuteProxy/BooleanOption"
	ExecuteProxy_UserOption_FullMethodName       = "/provider.ExecuteProxy/UserOption"
	ExecuteProxy_RoleOption_FullMethodName       = "/provider.ExecuteProxy/RoleOption"
	ExecuteProxy_ChannelOption_FullMethodName    = "/provider.ExecuteProxy/ChannelOption"
	ExecuteProxy_AttachmentOption_FullMethodName = "/provider.ExecuteProxy/AttachmentOption"
)

// ExecuteProxyClient is the client API for ExecuteProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExecuteProxyClient interface {
	StringOption(ctx context.Context, in *OptionRequest, opts ...grpc.CallOption) (*StringOptionResponse, error)
	IntegerOption(ctx context.Context, in *OptionRequest, opts ...grpc.CallOption) (*IntegerOptionResponse, error)
	NumberOption(ctx context.Context, in *OptionRequest, opts ...grpc.CallOption) (*NumberOptionResponse, error)
	BooleanOption(ctx context.Context, in *OptionRequest, opts ...grpc.CallOption) (*BooleanOptionResponse, error)
	UserOption(ctx context.Context, in *OptionRequest, opts ...grpc.CallOption) (*UserOptionResponse, error)
	RoleOption(ctx context.Context, in *OptionRequest, opts ...grpc.CallOption) (*RoleOptionResponse, error)
	ChannelOption(ctx context.Context, in *OptionRequest, opts ...grpc.CallOption) (*ChannelOptionResponse, error)
	AttachmentOption(ctx context.Context, in *OptionRequest, opts ...grpc.CallOption) (*AttachmentOptionResponse, error)
}

type executeProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewExecuteProxyClient(cc grpc.ClientConnInterface) ExecuteProxyClient {
	return &executeProxyClient{cc}
}

func (c *executeProxyClient) StringOption(ctx context.Context, in *OptionRequest, opts ...grpc.CallOption) (*StringOptionResponse, error) {
	out := new(StringOptionResponse)
	err := c.cc.Invoke(ctx, ExecuteProxy_StringOption_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executeProxyClient) IntegerOption(ctx context.Context, in *OptionRequest, opts ...grpc.CallOption) (*IntegerOptionResponse, error) {
	out := new(IntegerOptionResponse)
	err := c.cc.Invoke(ctx, ExecuteProxy_IntegerOption_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executeProxyClient) NumberOption(ctx context.Context, in *OptionRequest, opts ...grpc.CallOption) (*NumberOptionResponse, error) {
	out := new(NumberOptionResponse)
	err := c.cc.Invoke(ctx, ExecuteProxy_NumberOption_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executeProxyClient) BooleanOption(ctx context.Context, in *OptionRequest, opts ...grpc.CallOption) (*BooleanOptionResponse, error) {
	out := new(BooleanOptionResponse)
	err := c.cc.Invoke(ctx, ExecuteProxy_BooleanOption_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executeProxyClient) UserOption(ctx context.Context, in *OptionRequest, opts ...grpc.CallOption) (*UserOptionResponse, error) {
	out := new(UserOptionResponse)
	err := c.cc.Invoke(ctx, ExecuteProxy_UserOption_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executeProxyClient) RoleOption(ctx context.Context, in *OptionRequest, opts ...grpc.CallOption) (*RoleOptionResponse, error) {
	out := new(RoleOptionResponse)
	err := c.cc.Invoke(ctx, ExecuteProxy_RoleOption_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executeProxyClient) ChannelOption(ctx context.Context, in *OptionRequest, opts ...grpc.CallOption) (*ChannelOptionResponse, error) {
	out := new(ChannelOptionResponse)
	err := c.cc.Invoke(ctx, ExecuteProxy_ChannelOption_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executeProxyClient) AttachmentOption(ctx context.Context, in *OptionRequest, opts ...grpc.CallOption) (*AttachmentOptionResponse, error) {
	out := new(AttachmentOptionResponse)
	err := c.cc.Invoke(ctx, ExecuteProxy_AttachmentOption_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExecuteProxyServer is the server API for ExecuteProxy service.
// All implementations must embed UnimplementedExecuteProxyServer
// for forward compatibility
type ExecuteProxyServer interface {
	StringOption(context.Context, *OptionRequest) (*StringOptionResponse, error)
	IntegerOption(context.Context, *OptionRequest) (*IntegerOptionResponse, error)
	NumberOption(context.Context, *OptionRequest) (*NumberOptionResponse, error)
	BooleanOption(context.Context, *OptionRequest) (*BooleanOptionResponse, error)
	UserOption(context.Context, *OptionRequest) (*UserOptionResponse, error)
	RoleOption(context.Context, *OptionRequest) (*RoleOptionResponse, error)
	ChannelOption(context.Context, *OptionRequest) (*ChannelOptionResponse, error)
	AttachmentOption(context.Context, *OptionRequest) (*AttachmentOptionResponse, error)
	mustEmbedUnimplementedExecuteProxyServer()
}

// UnimplementedExecuteProxyServer must be embedded to have forward compatible implementations.
type UnimplementedExecuteProxyServer struct {
}

func (UnimplementedExecuteProxyServer) StringOption(context.Context, *OptionRequest) (*StringOptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StringOption not implemented")
}
func (UnimplementedExecuteProxyServer) IntegerOption(context.Context, *OptionRequest) (*IntegerOptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IntegerOption not implemented")
}
func (UnimplementedExecuteProxyServer) NumberOption(context.Context, *OptionRequest) (*NumberOptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NumberOption not implemented")
}
func (UnimplementedExecuteProxyServer) BooleanOption(context.Context, *OptionRequest) (*BooleanOptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BooleanOption not implemented")
}
func (UnimplementedExecuteProxyServer) UserOption(context.Context, *OptionRequest) (*UserOptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserOption not implemented")
}
func (UnimplementedExecuteProxyServer) RoleOption(context.Context, *OptionRequest) (*RoleOptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleOption not implemented")
}
func (UnimplementedExecuteProxyServer) ChannelOption(context.Context, *OptionRequest) (*ChannelOptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelOption not implemented")
}
func (UnimplementedExecuteProxyServer) AttachmentOption(context.Context, *OptionRequest) (*AttachmentOptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachmentOption not implemented")
}
func (UnimplementedExecuteProxyServer) mustEmbedUnimplementedExecuteProxyServer() {}

// UnsafeExecuteProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExecuteProxyServer will
// result in compilation errors.
type UnsafeExecuteProxyServer interface {
	mustEmbedUnimplementedExecuteProxyServer()
}

func RegisterExecuteProxyServer(s grpc.ServiceRegistrar, srv ExecuteProxyServer) {
	s.RegisterService(&ExecuteProxy_ServiceDesc, srv)
}

func _ExecuteProxy_StringOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecuteProxyServer).StringOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecuteProxy_StringOption_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecuteProxyServer).StringOption(ctx, req.(*OptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecuteProxy_IntegerOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecuteProxyServer).IntegerOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecuteProxy_IntegerOption_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecuteProxyServer).IntegerOption(ctx, req.(*OptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecuteProxy_NumberOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecuteProxyServer).NumberOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecuteProxy_NumberOption_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecuteProxyServer).NumberOption(ctx, req.(*OptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecuteProxy_BooleanOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecuteProxyServer).BooleanOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecuteProxy_BooleanOption_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecuteProxyServer).BooleanOption(ctx, req.(*OptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecuteProxy_UserOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecuteProxyServer).UserOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecuteProxy_UserOption_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecuteProxyServer).UserOption(ctx, req.(*OptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecuteProxy_RoleOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecuteProxyServer).RoleOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecuteProxy_RoleOption_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecuteProxyServer).RoleOption(ctx, req.(*OptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecuteProxy_ChannelOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecuteProxyServer).ChannelOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecuteProxy_ChannelOption_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecuteProxyServer).ChannelOption(ctx, req.(*OptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecuteProxy_AttachmentOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecuteProxyServer).AttachmentOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecuteProxy_AttachmentOption_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecuteProxyServer).AttachmentOption(ctx, req.(*OptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExecuteProxy_ServiceDesc is the grpc.ServiceDesc for ExecuteProxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExecuteProxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "provider.ExecuteProxy",
	HandlerType: (*ExecuteProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StringOption",
			Handler:    _ExecuteProxy_StringOption_Handler,
		},
		{
			MethodName: "IntegerOption",
			Handler:    _ExecuteProxy_IntegerOption_Handler,
		},
		{
			MethodName: "NumberOption",
			Handler:    _ExecuteProxy_NumberOption_Handler,
		},
		{
			MethodName: "BooleanOption",
			Handler:    _ExecuteProxy_BooleanOption_Handler,
		},
		{
			MethodName: "UserOption",
			Handler:    _ExecuteProxy_UserOption_Handler,
		},
		{
			MethodName: "RoleOption",
			Handler:    _ExecuteProxy_RoleOption_Handler,
		},
		{
			MethodName: "ChannelOption",
			Handler:    _ExecuteProxy_ChannelOption_Handler,
		},
		{
			MethodName: "AttachmentOption",
			Handler:    _ExecuteProxy_AttachmentOption_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/provider_interaction.proto",
}

const ()

// HandleProxyClient is the client API for HandleProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HandleProxyClient interface {
}

type handleProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewHandleProxyClient(cc grpc.ClientConnInterface) HandleProxyClient {
	return &handleProxyClient{cc}
}

// HandleProxyServer is the server API for HandleProxy service.
// All implementations must embed UnimplementedHandleProxyServer
// for forward compatibility
type HandleProxyServer interface {
	mustEmbedUnimplementedHandleProxyServer()
}

// UnimplementedHandleProxyServer must be embedded to have forward compatible implementations.
type UnimplementedHandleProxyServer struct {
}

func (UnimplementedHandleProxyServer) mustEmbedUnimplementedHandleProxyServer() {}

// UnsafeHandleProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HandleProxyServer will
// result in compilation errors.
type UnsafeHandleProxyServer interface {
	mustEmbedUnimplementedHandleProxyServer()
}

func RegisterHandleProxyServer(s grpc.ServiceRegistrar, srv HandleProxyServer) {
	s.RegisterService(&HandleProxy_ServiceDesc, srv)
}

// HandleProxy_ServiceDesc is the grpc.ServiceDesc for HandleProxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HandleProxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "provider.HandleProxy",
	HandlerType: (*HandleProxyServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "proto/provider_interaction.proto",
}
