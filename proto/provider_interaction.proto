syntax = "proto3";

package provider;

import "google/protobuf/empty.proto";
import "proto/discord_command_data.proto";

option go_package = "github.com/EliasStar/BacoTell/internal/proto/providerpb";

service InteractionProvider {
    rpc Prefix(google.protobuf.Empty) returns (GetPrefixResponse);
	rpc ApplicationCommands(google.protobuf.Empty) returns (GetApplicationCommandsResponse);
	rpc MessageComponents(google.protobuf.Empty) returns (GetMessageComponentsResponse);
}

message GetPrefixResponse {
    string prefix = 1;
}

message GetApplicationCommandsResponse {
    repeated uint32 command_ids = 1;
}

message GetMessageComponentsResponse {
    repeated uint32 component_ids = 1;
}

service Command {
    rpc CommandData(google.protobuf.Empty) returns (CommandDataResponse);
    rpc Execute(ExecuteRequest) returns (google.protobuf.Empty);
    // rpc Autocomplete(AutocompleteRequest) returns (google.protobuf.Empty);
}

message CommandDataResponse {
    discord.CommandData data = 1;
}

message ExecuteRequest {
    uint32 execute_proxy_id = 1;
}

// message AutocompleteRequest {
//     uint32 interaction_proxy_id = 1;
// }

service Component {
    rpc CustomId(google.protobuf.Empty) returns (CustomIdResponse);
    rpc Handle(HandleRequest) returns (google.protobuf.Empty);
}

message CustomIdResponse {
    string custom_id = 1;
}

message HandleRequest {
    uint32 handle_proxy_id = 1;
}

service InteractionProxy {
    rpc Defer(DeferRequest) returns (google.protobuf.Empty);
    rpc Respond(RespondRequest) returns (google.protobuf.Empty);
    rpc Followup(FollowupRequest) returns (FollowupResponse);
    rpc Edit(EditRequest) returns (google.protobuf.Empty);
    rpc Delete(DeleteRequest) returns (google.protobuf.Empty);
}

message DeferRequest {
    bool ephemeral = 1;
    bool suppressEmbeds = 2;
    bool tts = 3;
}

message RespondRequest {
    string message = 1;
    bool ephemeral = 2;
    bool suppressEmbeds = 3;
    bool tts = 4;
}

message FollowupRequest {
    string message = 1;
    bool ephemeral = 2;
    bool suppressEmbeds = 3;
    bool tts = 4;
}

message FollowupResponse {
    string id = 1;
}

message EditRequest {
    string id = 1;
    string message = 2;
}

message DeleteRequest {
    string id = 1;
}

service ExecuteProxy {
	rpc StringOption(OptionRequest) returns (StringOptionResponse);
	rpc IntegerOption(OptionRequest) returns (IntegerOptionResponse);
	rpc NumberOption(OptionRequest) returns (NumberOptionResponse);
	rpc BooleanOption(OptionRequest) returns (BooleanOptionResponse);

	// rpc UserOption(OptionRequest)  returns (discordgo.User, error);
	// rpc ChannelOption(OptionRequest) returns  (discordgo.Channel, error);
	// rpc RoleOption(OptionRequest)  returns (discordgo.Role, error);
	// rpc MentionableOption(OptionRequest) returns  (any, error);

	// rpc AttachmentOption(OptionRequest) (discordgo.MessageAttachment, error);
}

message OptionRequest {
    string name = 1;
}

message StringOptionResponse {
    string value = 1;
}

message IntegerOptionResponse {
    int64 value = 1;
}

message NumberOptionResponse {
    double value = 1;
}

message BooleanOptionResponse {
    bool value = 1;
}

service HandleProxy {

}
